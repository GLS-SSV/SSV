#include "RCS_RM.h"

/*
   MDM Manifold JETS
01 FF1 Fwd 1 F1F, F1L, F1U, F1D
02 FF2 Fwd 2 F2F, F2R, F2U, F2D
03 FF4 Fwd 3 F3F, F3L, F3U, F3D
04 FF3 Fwd 4 F4R, F4D
05 FF3 Fwd 5 F5L, F5R
06 FA1 Aft 1 left L1A, L1L, L1U
07 FA3 Aft 2 left L2L, L2U, L2D
08 FA2 Aft 3 left L3A, L3L, L3D
09 FA4 Aft 4 left L4L, L4U, L4D
10 FA1 Aft 5 left L5D, L5L
11 FA1 Aft 1 right R1A, R1R, R1U
12 FA3 Aft 2 right R2R, R2U, R2D
13 FA2 Aft 3 right R3A, R3R, R3D
14 FA4 Aft 4 right R4R, R4U, R4D
15 FA2 Aft 5 right R5D, R5R
*/

/*
fwd RCS jet indexes
01 F1F
02 F1L
03 F1U
04 F1D
05 F2F
06 F2R
07 F2U
08 F2D
09 F4R
10 F4D
11 F5L
12 F5R
13 F3F
14 F3L
15 F3U
16 F3D
*/
/*
aft RCS jet indexes
01 - L1A
02 - L1L
03 - L1U
04 - R1A
05 - R1R
06 - R1U
07 - L5D
08 - L5L
09 - L3A
10 - L3L
11 - L3D
12 - R3A
13 - R3R
14 - R3D
15 - R5R
16 - R5D
17 - L2L
18 - L2U
19 - L2D
20 - R2R
21 - R2U
22 - R2D
23 - L4L
24 - L4U
25 - L4D
26 - R4R
27 - R4U
28 - R4D
*/
/*
all RCS jet indexes
01 RJDF 1 F2F
02 RJDF 2 F3F
03 RJDF 1 F1F
04 RJDF 1 F1L
05 RJDF 2 F3L
06 RJDF 1 F2R
07 RJDF 2 F4R
08 RJDF 1 F2U
09 RJDF 2 F3U
10 RJDF 1 F1U
11 RJDF 1 F2D
12 RJDF 1 F1D
13 RJDF 2 F4D
14 RJDF 2 F3D
15 RJDA 2 R3A
16 RJDA 1 R1A
17 RJDA 2 L3A
18 RJDA 1 L1A
19 RJDA 2 L4L
20 RJDA 1 L2L
21 RJDA 2 L3L
22 RJDA 1 L1L
23 RJDA 2 R4R
24 RJDA 1 R2R
25 RJDA 2 R3R
26 RJDA 1 R1R
27 RJDA 2 L4U
28 RJDA 1 L2U
29 RJDA 1 L1U
30 RJDA 2 R4U
31 RJDA 1 R2U
32 RJDA 1 R1U
33 RJDA 2 L4D
34 RJDA 1 L2D
35 RJDA 2 L3D
36 RJDA 2 R4D
37 RJDA 1 R2D
38 RJDA 2 R3D
39 RJDF 2 F5L
40 RJDF 2 F5R
41 RJDA 1 L5L
42 RJDA 2 R5R
43 RJDA 1 L5D
44 RJDA 2 R5D
*/



// maps jets idx to manif idx
constexpr unsigned short JET_MANIF_FWD[16] = {0, 0, 0, 0, 1,
						1, 1, 1, 3, 3,
						4, 4, 2, 2, 2, 2};
constexpr unsigned short JET_MANIF_AFT[28] = {5, 5, 5, 10, 10,
						10, 9, 9, 7, 7,
						7, 12, 12, 12, 14,
						14, 6, 6, 6, 11,
						11, 11, 8, 8, 8,
						13, 13, 13};


// TODO I-Loads
constexpr unsigned short MANF_DILEM_PASS_CONT_LT = 3;// DILEMMA PASS COUNTER LIMIT (V98U7162C) (HACK no source)
constexpr unsigned short PWR_FAIL_PASS_CNT_LT = 3;// POWER FAIL PASS COUNTER LIMIT (V98U7161C) (HACK no source)

constexpr unsigned short JET_MAP[38] = {
	1, 5, 13,
	2, 14,
	6, 9,
	3, 7, 15,
	8, 10,
	4, 16,
	4, 12,
	1, 9,
	2, 17, 10, 23,
	5, 20, 13, 26,
	3, 18, 24,
	6, 21, 27,
	19, 11, 25,
	22, 14, 28
	};// (V90J5727C-V90J5764C)


constexpr double PROC_RATE_AVAILABLE_JET_STATUS_TABLE_101 = 1 / 0.52;// [1/Hz]
constexpr double PROC_RATE_AVAILABLE_JET_STATUS_TABLE_x0x = 1 / 12.5;// [1/Hz]
constexpr double PROC_RATE_JET_FAILED_OFF_MONITOR_101 = /*1 / 0*/1 / 0.000001;// HACK does not run in MM101, for simplification made to run every 11 days [1/Hz]
constexpr double PROC_RATE_JET_FAILED_OFF_MONITOR_x0x = 1 / 12.5;// [1/Hz]
constexpr double PROC_RATE_JET_FAILED_ON_MONITOR_10x = 1 / 0.52;// [1/Hz]
constexpr double PROC_RATE_JET_FAILED_ON_MONITOR_30x_60x = 1 / 3.125;// [1/Hz]
constexpr double PROC_RATE_JET_FAILED_ON_MONITOR_20x_80x = 1 / 12.5;// [1/Hz]
constexpr double PROC_RATE_JET_LEAK_MONITOR = 1 / 0.52;// [1/Hz]
constexpr double PROC_RATE_MANIFOLD_STATUS_MONITOR = 1 / 3.125;// [1/Hz]
constexpr double PROC_RATE_JET_FAULT_LIMIT_101 = 1 / 0.52;// [1/Hz]
constexpr double PROC_RATE_JET_FAULT_LIMIT_x0x = 1 / 12.5;// [1/Hz]
constexpr double PROC_RATE_JET_PRIORITY_STATUS_TABLE = 1 / 12.5;// [1/Hz]



namespace dps
{
	RCS_RM::RCS_RM( SimpleGPCSystem *_gpc ):SimpleGPCSoftware( _gpc, "RCS_RM" )
	{
		// make modules run at start
		step_AVAILABLE_JET_STATUS_TABLE = 999.0;
		step_JET_FAILED_OFF_MONITOR = 999.0;
		step_JET_FAILED_ON_MONITOR = 999.0;
		step_JET_LEAK_MONITOR = 999.0;
		step_MANIFOLD_STATUS_MONITOR = 999.0;
		step_JET_FAULT_LIMIT = 999.0;
		step_JET_PRIORITY_STATUS_TABLE = 999.0;

		// TODO init vars
		for (int i = 0; i < 15; i++)
		{
			FUEL_MANIFOLD_VALVE_OPEN_PV[i] = false;
			OXIDIZER_MANIFOLD_VALVE_OPEN_PV[i] = false;
			FUEL_MANIFOLD_VALVE_CLOSE_PV[i] = false;
			OXIDIZER_MANIFOLD_VALVE_CLOSE_PV[i] = false;
			MANF_DILEM_PASS_CONT[i] = 0;
			PWR_FAIL_PASS_CNT[i] = 0;
			PWR_FAIL_SET[i] = false;
		}

		for (int i = 0; i < 44; i++) JET_DES_INHIBIT_PV[i] = false;

		// HACK init I-LOAD
		for (int i = 0; i < 38; i++) WriteCOMPOOL_AIS( SCP_JET_MAP_ELEMENT, i + 1, JET_MAP[i], 38 );
		return;
	}

	RCS_RM::~RCS_RM( void )
	{
		return;
	}

	void RCS_RM::Realize( void )
	{
		return;
	}

	void RCS_RM::OnPostStep( double simt, double simdt, double mjd )
	{
		unsigned int MM = ReadCOMPOOL_IS( SCP_MM );
		// maintain FIRE CMD B history
		{
			// shift
			for (int i = 0; i < (FIRE_B_LEN - 1); i++)
			{
				memcpy( histFIRE_CMD_B[i], histFIRE_CMD_B[i + 1], 44 * sizeof(bool) );
			}

			// get latest
			for (int i = 0; i < 44; i++) histFIRE_CMD_B[FIRE_B_LEN - 1][i] = (ReadCOMPOOL_AIS( SCP_RCS_ON_B, i + 1, 44 ) == 1);
		}

		// run modules at prescribed rates
		double rt = 0;
		if (MM == 101) rt = PROC_RATE_AVAILABLE_JET_STATUS_TABLE_101;
		else rt = PROC_RATE_AVAILABLE_JET_STATUS_TABLE_x0x;
		step_AVAILABLE_JET_STATUS_TABLE += simdt;
		if (step_AVAILABLE_JET_STATUS_TABLE >= rt)
		{
			AVAILABLE_JET_STATUS_TABLE();
			step_AVAILABLE_JET_STATUS_TABLE = 0;
		}

		if (MM == 101) rt = PROC_RATE_JET_FAILED_OFF_MONITOR_101;
		else rt = PROC_RATE_JET_FAILED_OFF_MONITOR_x0x;
		step_JET_FAILED_OFF_MONITOR += simdt;
		if (step_JET_FAILED_OFF_MONITOR >= rt)
		{
			JET_FAILED_OFF_MONITOR();
			step_JET_FAILED_OFF_MONITOR = 0;
		}

		if ((MM / 100) == 1) rt = PROC_RATE_JET_FAILED_ON_MONITOR_10x;
		else if (((MM / 100) == 3) || ((MM / 100) == 6)) rt = PROC_RATE_JET_FAILED_ON_MONITOR_30x_60x;
		else rt = PROC_RATE_JET_FAILED_ON_MONITOR_20x_80x;
		step_JET_FAILED_ON_MONITOR += simdt;
		if (step_JET_FAILED_ON_MONITOR >= rt)
		{
			JET_FAILED_ON_MONITOR();
			step_JET_FAILED_ON_MONITOR = 0;
		}
		JET_FAILED_ON_MONITOR();

		step_JET_LEAK_MONITOR += simdt;
		if (step_JET_LEAK_MONITOR >= PROC_RATE_JET_LEAK_MONITOR)
		{
			JET_LEAK_MONITOR();
			step_JET_LEAK_MONITOR = 0;
		}

		step_MANIFOLD_STATUS_MONITOR += simdt;
		if (step_MANIFOLD_STATUS_MONITOR >= PROC_RATE_MANIFOLD_STATUS_MONITOR)
		{
			MANIFOLD_STATUS_MONITOR();
			step_MANIFOLD_STATUS_MONITOR = 0;
		}

		if (MM == 101) rt = PROC_RATE_JET_FAULT_LIMIT_101;
		else rt = PROC_RATE_JET_FAULT_LIMIT_x0x;
		step_JET_FAULT_LIMIT += simdt;
		if (step_JET_FAULT_LIMIT >= rt)
		{
			JET_FAULT_LIMIT();
			step_JET_FAULT_LIMIT = 0;
		}

		step_JET_PRIORITY_STATUS_TABLE += simdt;
		if (step_JET_PRIORITY_STATUS_TABLE >= PROC_RATE_JET_PRIORITY_STATUS_TABLE)
		{
			JET_PRIORITY_STATUS_TABLE();
			step_JET_PRIORITY_STATUS_TABLE = 0;
		}
		return;
	}

	bool RCS_RM::OnParseLine( const char* keyword, const char* value )
	{
		return false;
	}

	void RCS_RM::OnSaveState( FILEHANDLE scn ) const
	{
		return;
	}

	bool RCS_RM::OnMajorModeChange( unsigned int newMajorMode )
	{
		return true;
	}

	void RCS_RM::AVAILABLE_JET_STATUS_TABLE( void )
	{
		/*
		in
		MANIFOLD OPEN/CLOSE STATUS discretes (15) <MANIFOLD STATUS>
		JET DESELECT discretes (44) <JET FAULT LIMIT>
		
		out
		JET AVAILABLE discretes (44)
		JET STATUS CHANGE discretes (1)
		*/
		unsigned short NEW_AVAILABLE_JET_FWD[16];
		unsigned short NEW_AVAILABLE_JET_AFT[28];
		for (auto& x : NEW_AVAILABLE_JET_FWD) x = 0;
		for (auto& x : NEW_AVAILABLE_JET_AFT) x = 0;

		bool RCS_MANIFOLD_OP_CL_STATUS[15];
		for (int i = 0; i < 15; i++) RCS_MANIFOLD_OP_CL_STATUS[i] = ReadCOMPOOL_AIS( SCP_RCS_MANIFOLD_OP_CL_STATUS, i + 1, 15 );

		bool JET_DESELECT[44];
		for (int i = 0; i < 44; i++) JET_DESELECT[i] = ReadCOMPOOL_AIS( SCP_JET_DESELECT, i + 1, 44 );

		for (int i = 0; i < 16; i++)
		{
			if (RCS_MANIFOLD_OP_CL_STATUS[JET_MANIF_FWD[i]] && !JET_DESELECT[i]) NEW_AVAILABLE_JET_FWD[i] = 1;
		}
		for (int i = 0; i < 28; i++)
		{
			if (RCS_MANIFOLD_OP_CL_STATUS[JET_MANIF_AFT[i]] && !JET_DESELECT[i + 16]) NEW_AVAILABLE_JET_AFT[i] = 1;
		}

		// compare with current
		unsigned short AVAILABLE_JET_FWD[16];
		unsigned short AVAILABLE_JET_AFT[28];
		for (int i = 0; i < 16; i++) AVAILABLE_JET_FWD[i] = ReadCOMPOOL_AIS( SCP_AVAILABLE_JET_FWD, i + 1, 16 );
		for (int i = 0; i < 28; i++) AVAILABLE_JET_AFT[i] = ReadCOMPOOL_AIS( SCP_AVAILABLE_JET_AFT, i + 1, 28 );

		if (memcmp( AVAILABLE_JET_FWD, NEW_AVAILABLE_JET_FWD, 16 * sizeof(unsigned short) ))
		{
			// different
			WriteCOMPOOL_IS( SCP_JET_STATUS_CHANGE, 1 );
			for (int i = 0; i < 16; i++) WriteCOMPOOL_AIS( SCP_AVAILABLE_JET_FWD, i + 1, NEW_AVAILABLE_JET_FWD[i], 44 );
		}
		if (memcmp( AVAILABLE_JET_AFT, NEW_AVAILABLE_JET_AFT, 28 * sizeof(unsigned short) ))
		{
			// different
			WriteCOMPOOL_IS( SCP_JET_STATUS_CHANGE, 1 );
			for (int i = 0; i < 28; i++) WriteCOMPOOL_AIS( SCP_AVAILABLE_JET_AFT, i + 1, NEW_AVAILABLE_JET_AFT[i], 44 );
		}
		return;
	}

	void RCS_RM::JET_FAILED_OFF_MONITOR( void )
	{
		/*
		in
		JET FIRE COMMAND B discretes (44)
		JET CHAMBER PRESSURE discretes (44) <RJD>
		JET DES INHIBIT discretes (44) <RCS SPEC FUNCTION>
		JET LRU-COMMFAULT discretes (44) <FCOS>
		JET RESET discrete (1) <RCS SPEC FUNCTION>

		out
		JET-FAILED-OFF INDICATORS (44)
		*/

		bool JET_CHAMBER_PRESSURE[44];
		unsigned short FF1_IOM6_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM6_CH0_DATA );
		JET_CHAMBER_PRESSURE[2] = (FF1_IOM6_CH0 & 0x0001) != 0;// 0 - RJDF 1 JET F1F CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[3] = (FF1_IOM6_CH0 & 0x0002) != 0;// 1 - RJDF 1 JET F1L CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[9] = (FF1_IOM6_CH0 & 0x0004) != 0;// 2 - RJDF 1 JET F1U CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[11] = (FF1_IOM6_CH0 & 0x0008) != 0;// 3 - RJDF 1 JET F1D CHAMBER PRESS IND
		unsigned short FF2_IOM6_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM6_CH0_DATA );
		JET_CHAMBER_PRESSURE[0] = (FF2_IOM6_CH0 & 0x0001) != 0;// 0 - RJDF 1 JET F2F CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[5] = (FF2_IOM6_CH0 & 0x0002) != 0;// 1 - RJDF 1 JET F2R CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[7] = (FF2_IOM6_CH0 & 0x0004) != 0;// 2 - RJDF 1 JET F2U CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[10] = (FF2_IOM6_CH0 & 0x0008) != 0;// 3 - RJDF 1 JET F2D CHAMBER PRESS IND
		unsigned short FF3_IOM6_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM6_CH0_DATA );
		JET_CHAMBER_PRESSURE[6] = (FF3_IOM6_CH0 & 0x0001) != 0;// 0 - RJDF 2 JET F4R CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[12] = (FF3_IOM6_CH0 & 0x0002) != 0;// 1 - RJDF 2 JET F4D CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[38] = (FF3_IOM6_CH0 & 0x0004) != 0;// 2 - RJDF 2 JET F5L CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[39] = (FF3_IOM6_CH0 & 0x0008) != 0;// 3 - RJDF 2 JET F5R CHAMBER PRESS IND
		unsigned short FF4_IOM6_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM6_CH0_DATA );
		JET_CHAMBER_PRESSURE[1] = (FF4_IOM6_CH0 & 0x0001) != 0;// 0 - RJDF 2 JET F3F CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[4] = (FF4_IOM6_CH0 & 0x0002) != 0;// 1 - RJDF 2 JET F3L CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[8] = (FF4_IOM6_CH0 & 0x0004) != 0;// 2 - RJDF 2 JET F3U CHAMBER PRESS IND
		JET_CHAMBER_PRESSURE[13] = (FF4_IOM6_CH0 & 0x0008) != 0;// 3 - RJDF 2 JET F3D CHAMBER PRESS IND
		unsigned short FA1_IOM5_CH0 = ReadCOMPOOL_IS( SCP_FA1_IOM5_CH0_DATA );
		JET_CHAMBER_PRESSURE[17] = (FA1_IOM5_CH0 & 0x0001) != 0;// 0 - RJDA 1 JET L1A CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[21] = (FA1_IOM5_CH0 & 0x0002) != 0;// 1 - RJDA 1 JET L1L CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[28] = (FA1_IOM5_CH0 & 0x0004) != 0;// 2 - RJDA 1 JET L1U CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[15] = (FA1_IOM5_CH0 & 0x0008) != 0;// 3 - RJDA 1 JET R1A CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[25] = (FA1_IOM5_CH0 & 0x0010) != 0;// 4 - RJDA 1 JET R1R CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[31] = (FA1_IOM5_CH0 & 0x0020) != 0;// 5 - RJDA 1 JET R1U CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[42] = (FA1_IOM5_CH0 & 0x0040) != 0;// 6 - RJDA 1 JET L5D CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[40] = (FA1_IOM5_CH0 & 0x0080) != 0;// 7 - RJDA 1 JET L5L CHMBR PRESS IND
		unsigned short FA2_IOM5_CH0 = ReadCOMPOOL_IS( SCP_FA2_IOM5_CH0_DATA );
		JET_CHAMBER_PRESSURE[16] = (FA2_IOM5_CH0 & 0x0001) != 0;// 0 - RJDA 2 JET L3A CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[20] = (FA2_IOM5_CH0 & 0x0002) != 0;// 1 - RJDA 2 JET L3L CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[34] = (FA2_IOM5_CH0 & 0x0004) != 0;// 2 - RJDA 2 JET L3D CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[14] = (FA2_IOM5_CH0 & 0x0008) != 0;// 3 - RJDA 2 JET R3A CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[24] = (FA2_IOM5_CH0 & 0x0010) != 0;// 4 - RJDA 2 JET R3R CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[37] = (FA2_IOM5_CH0 & 0x0020) != 0;// 5 - RJDA 2 JET R3D CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[41] = (FA2_IOM5_CH0 & 0x0040) != 0;// 6 - RJDA 2 JET R5R CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[43] = (FA2_IOM5_CH0 & 0x0080) != 0;// 7 - RJDA 2 JET R5D CHMBR PRESS IND
		unsigned short FA3_IOM5_CH0 = ReadCOMPOOL_IS( SCP_FA3_IOM5_CH0_DATA );
		JET_CHAMBER_PRESSURE[19] = (FA3_IOM5_CH0 & 0x0001) != 0;// 0 - RJDA 1 JET L2L CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[27] = (FA3_IOM5_CH0 & 0x0002) != 0;// 1 - RJDA 1 JET L2U CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[33] = (FA3_IOM5_CH0 & 0x0004) != 0;// 2 - RJDA 1 JET L2D CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[23] = (FA3_IOM5_CH0 & 0x0008) != 0;// 3 - RJDA 1 JET R2R CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[30] = (FA3_IOM5_CH0 & 0x0010) != 0;// 4 - RJDA 1 JET R2U CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[36] = (FA3_IOM5_CH0 & 0x0020) != 0;// 5 - RJDA 1 JET R2D CHMBR PRESS IND
		unsigned short FA4_IOM5_CH0 = ReadCOMPOOL_IS( SCP_FA4_IOM5_CH0_DATA );
		JET_CHAMBER_PRESSURE[18] = (FA4_IOM5_CH0 & 0x0001) != 0;// 0 - RJDA 2 JET L4L CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[26] = (FA4_IOM5_CH0 & 0x0002) != 0;// 1 - RJDA 2 JET L4U CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[32] = (FA4_IOM5_CH0 & 0x0004) != 0;// 2 - RJDA 2 JET L4D CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[22] = (FA4_IOM5_CH0 & 0x0008) != 0;// 3 - RJDA 2 JET R4R CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[29] = (FA4_IOM5_CH0 & 0x0010) != 0;// 4 - RJDA 2 JET R4U CHMBR PRESS IND
		JET_CHAMBER_PRESSURE[35] = (FA4_IOM5_CH0 & 0x0020) != 0;// 5 - RJDA 2 JET R4D CHMBR PRESS IND


		/*for (int i = 0; i < 44; i++)
		{
			// TODO

			if (!JET_CHAMBER_PRESSURE[i] && histFIRE_CMD_B[0][i])
			{
				JET_FAILED_OFF_COUNTER[i]++;
				if (JET_FAILED_OFF_COUNTER[i] >= 6)// TODO I-Load
				{
					JET_FAILED_OFF_INDICATOR[i] = true;
				}
			}
			else if (JET_CHAMBER_PRESSURE[i] && histFIRE_CMD_B[0][i]) JET_FAILED_OFF_COUNTER[i] = 0;

			if (JET_RESET[i] == true)
			{
				if (JET_DES[i] == false) JET_FAILED_OFF_INDICATOR[i] = false;
				JET_FAILED_OFF_COUNTER[i] = 0;
			}
		}*/
		return;
	}

	void RCS_RM::JET_FAILED_ON_MONITOR( void )
	{
		/*
		in
		JET (FIRE) COMMAND B discretes (44)
		RJD OUTPUT discretes (44) <RJD>
		JET DES INHIBIT discretes (44) <RCS SPEC FUNCTION>
		JET-LRU-COMMFAULT discretes (44) <FCOS>
		JET RESET discrete (1) <RCS SPEC FUNCTION>
		AUTO_MANF_CLOSE discrete (l) <ORBIT DAP>
		AUTO_MANF_CL_ENA discrete (l) <SPEC 23>
		
		out
		JET-FAILED-ON INDICATORS (44)
		*/
		bool RJD_OUTPUT[44];
		unsigned short FF1_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM9_CH0_DATA );
		RJD_OUTPUT[2] = (FF1_IOM9_CH0 & 0x0001) != 0;// 0 - RJDF 1 JET F1F DRIVER
		RJD_OUTPUT[3] = (FF1_IOM9_CH0 & 0x0002) != 0;// 1 - RJDF 1 JET F1L DRIVER
		RJD_OUTPUT[9] = (FF1_IOM9_CH0 & 0x0004) != 0;// 2 - RJDF 1 JET F1U DRIVER
		RJD_OUTPUT[11] = (FF1_IOM9_CH0 & 0x0008) != 0;// 3 - RJDF 1 JET F1D DRIVER
		unsigned short FF2_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM9_CH0_DATA );
		RJD_OUTPUT[0] = (FF2_IOM9_CH0 & 0x0001) != 0;// 0 - RJDF 1 JET F2F DRIVER
		RJD_OUTPUT[5] = (FF2_IOM9_CH0 & 0x0002) != 0;// 1 - RJDF 1 JET F2R DRIVER
		RJD_OUTPUT[7] = (FF2_IOM9_CH0 & 0x0004) != 0;// 2 - RJDF 1 JET F2U DRIVER
		RJD_OUTPUT[10] = (FF2_IOM9_CH0 & 0x0008) != 0;// 3 - RJDF 1 JET F2D DRIVER
		unsigned short FF3_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM9_CH0_DATA );
		RJD_OUTPUT[6] = (FF3_IOM9_CH0 & 0x0001) != 0;// 0 - RJDF 2 JET F4R DRIVER
		RJD_OUTPUT[12] = (FF3_IOM9_CH0 & 0x0002) != 0;// 1 - RJDF 2 JET F4D DRIVER
		RJD_OUTPUT[38] = (FF3_IOM9_CH0 & 0x0004) != 0;// 2 - RJDF 2 JET F5L DRIVER
		RJD_OUTPUT[39] = (FF3_IOM9_CH0 & 0x0008) != 0;// 3 - RJDF 2 JET F5R DRIVER
		unsigned short FF4_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM9_CH0_DATA );
		RJD_OUTPUT[1] = (FF4_IOM9_CH0 & 0x0001) != 0;// 0 - RJDF 2 JET F3F DRIVER
		RJD_OUTPUT[4] = (FF4_IOM9_CH0 & 0x0002) != 0;// 1 - RJDF 2 JET F3L DRIVER
		RJD_OUTPUT[8] = (FF4_IOM9_CH0 & 0x0004) != 0;// 2 - RJDF 2 JET F3U DRIVER
		RJD_OUTPUT[13] = (FF4_IOM9_CH0 & 0x0008) != 0;// 3 - RJDF 2 JET F3D DRIVER
		unsigned short FA1_IOM8_CH0 = ReadCOMPOOL_IS( SCP_FA1_IOM8_CH0_DATA );
		RJD_OUTPUT[17] = (FA1_IOM8_CH0 & 0x0001) != 0;// 0 - RJDA 1 JET L1A DRIVER
		RJD_OUTPUT[21] = (FA1_IOM8_CH0 & 0x0002) != 0;// 1 - RJDA 1 JET L1L DRIVER
		RJD_OUTPUT[28] = (FA1_IOM8_CH0 & 0x0004) != 0;// 2 - RJDA 1 JET L1U DRIVER
		RJD_OUTPUT[15] = (FA1_IOM8_CH0 & 0x0008) != 0;// 3 - RJDA 1 JET R1A DRIVER
		RJD_OUTPUT[25] = (FA1_IOM8_CH0 & 0x0010) != 0;// 4 - RJDA 1 JET R1R DRIVER
		RJD_OUTPUT[31] = (FA1_IOM8_CH0 & 0x0020) != 0;// 5 - RJDA 1 JET R1U DRIVER
		RJD_OUTPUT[42] = (FA1_IOM8_CH0 & 0x0040) != 0;// 6 - RJDA 1 JET L5D DRIVER
		RJD_OUTPUT[40] = (FA1_IOM8_CH0 & 0x0080) != 0;// 7 - RJDA 1 JET L5L DRIVER
		unsigned short FA2_IOM8_CH0 = ReadCOMPOOL_IS( SCP_FA2_IOM8_CH0_DATA );
		RJD_OUTPUT[16] = (FA2_IOM8_CH0 & 0x0001) != 0;// 0 - RJDA 2 JET L3A DRIVER
		RJD_OUTPUT[20] = (FA2_IOM8_CH0 & 0x0002) != 0;// 1 - RJDA 2 JET L3L DRIVER
		RJD_OUTPUT[34] = (FA2_IOM8_CH0 & 0x0004) != 0;// 2 - RJDA 2 JET L3D DRIVER
		RJD_OUTPUT[14] = (FA2_IOM8_CH0 & 0x0008) != 0;// 3 - RJDA 2 JET R3A DRIVER
		RJD_OUTPUT[24] = (FA2_IOM8_CH0 & 0x0010) != 0;// 4 - RJDA 2 JET R3R DRIVER
		RJD_OUTPUT[37] = (FA2_IOM8_CH0 & 0x0020) != 0;// 5 - RJDA 2 JET R3D DRIVER
		RJD_OUTPUT[41] = (FA2_IOM8_CH0 & 0x0040) != 0;// 6 - RJDA 2 JET R5R DRIVER
		RJD_OUTPUT[43] = (FA2_IOM8_CH0 & 0x0080) != 0;// 7 - RJDA 2 JET R5D DRIVER
		unsigned short FA3_IOM8_CH0 = ReadCOMPOOL_IS( SCP_FA3_IOM8_CH0_DATA );
		RJD_OUTPUT[19] = (FA3_IOM8_CH0 & 0x0001) != 0;// 0 - RJDA 1 JET L2L DRIVER
		RJD_OUTPUT[27] = (FA3_IOM8_CH0 & 0x0002) != 0;// 1 - RJDA 1 JET L2U DRIVER
		RJD_OUTPUT[33] = (FA3_IOM8_CH0 & 0x0004) != 0;// 2 - RJDA 1 JET L2D DRIVER
		RJD_OUTPUT[23] = (FA3_IOM8_CH0 & 0x0008) != 0;// 3 - RJDA 1 JET R2R DRIVER
		RJD_OUTPUT[30] = (FA3_IOM8_CH0 & 0x0010) != 0;// 4 - RJDA 1 JET R2U DRIVER
		RJD_OUTPUT[36] = (FA3_IOM8_CH0 & 0x0020) != 0;// 5 - RJDA 1 JET R2D DRIVER
		unsigned short FA4_IOM8_CH0 = ReadCOMPOOL_IS( SCP_FA4_IOM8_CH0_DATA );
		RJD_OUTPUT[18] = (FA4_IOM8_CH0 & 0x0001) != 0;// 0 - RJDA 2 JET L4L DRIVER
		RJD_OUTPUT[26] = (FA4_IOM8_CH0 & 0x0001) != 0;// 1 - RJDA 2 JET L4U DRIVER
		RJD_OUTPUT[32] = (FA4_IOM8_CH0 & 0x0001) != 0;// 2 - RJDA 2 JET L4D DRIVER
		RJD_OUTPUT[22] = (FA4_IOM8_CH0 & 0x0001) != 0;// 3 - RJDA 2 JET R4R DRIVER
		RJD_OUTPUT[29] = (FA4_IOM8_CH0 & 0x0001) != 0;// 4 - RJDA 2 JET R4U DRIVER
		RJD_OUTPUT[35] = (FA4_IOM8_CH0 & 0x0001) != 0;// 5 - RJDA 2 JET R4D DRIVER
		return;
	}

	void RCS_RM::JET_LEAK_MONITOR( void )
	{
		/*
		in
		JET FUEL INJECTOR TEMPERATURES (44)
		JET OXIDIZER INJECTOR TEMPERATURES (44)
		JET DES INHIBIT discretes (44) <RCS SPEC FUNCTION>
		JET-LRU-COMMFAULT discrete (44) <FCOS>
		JET RESET discretes (1) <RCS SPEC FUNCTION>
		
		out
		JET-FAILED LEAK indicators (44)
		*/
		return;
	}

	void RCS_RM::MANIFOLD_STATUS_MONITOR( void )
	{
		/*
		in
		FUEL-MANIFOLD-VALVE-OPEN discretes (15) <motor control assemblies>
		OXIDIZER-MANIFOLD-VALVE-OPEN discretes (15) <motor control assemblies>
		FUEL-MANIFOLD-VALVE-CLOSE discretes (15) <motor control assemblies>
		OXIDIZER-MANIFOLD-VALVE-CLOSE discretes (15) <motor control assemblies>
		RCS MANIFOLD OPEN/CLOSE STATUS OVERRIDE discrete (1) <override>
		RCS MANIFOLD XX OPEN/CLOSE STATUS OVERRIDE discretes (15) <RCS SPEC FUNCTION>
		MANIFOLD LRU COMMFAULT discretes (15) <FCOS>
		LRU BCE BYPASS discretes (8) <FCOS>

		out
		MANIFOLD OPEN/CLOSE STATUS discretes (15)
		RCS MANIFOLD RM DILEMMA discretes (15)
		RM POWER FAIL discrete (1)
		*/


		// RCS_FFU_MIV_CL_CF(5)
		// RCS_FOX_MIV_CL_CF(5)
		// RCS_LFU_MIV_CL_CF(5)
		// RCS_LOX_MIV_CL_CF(5)
		// RCS_RFU_MIV_CL_CF(5)
		// RCS_ROX_MIV_CL_CF(5)
		
		// RCS_FFU_MIV_OP_CF(5)
		// RCS_FOX_MIV_OP_CF(5)
		// RCS_LFU_MIV_OP_CF(5)
		// RCS_LOX_MIV_OP_CF(5)
		// RCS_RFU_MIV_OP_CF(5)
		// RCS_ROX_MIV_OP_CF(5)


		/*
		V91X2246X FF1 INPUT PROM SEG 2,6 BYPASS(MFE)
		V91X2247X FF2 INPUT PROM SEG 2,6 BYPASS(MFE)
		V91X2248X FF3 INPUT PROM SEG 2,6 BYPASS(MFE)
		V91X2249X FF4 INPUT PROM SEG 2,6 BYPASS(MFE)

		V91X2806X FA1 INPUT PROM SEG3,10 BYPASS(HFE)
		V91X2807X FA2 INPUT PROM SEG3,10 BYPASS(HFE)
		V91X2808X FA3 INPUT PROM SEG3,10 BYPASS(HFE)
		V91X2809X FA4 INPUT PROM SEG3,10 BYPASS(HFE)
		*/
		

		
		bool FUEL_MANIFOLD_VALVE_OPEN[15];// 0-4=F, 5-9=L, 10-14=R
		bool OXIDIZER_MANIFOLD_VALVE_OPEN[15];
		bool FUEL_MANIFOLD_VALVE_CLOSE[15];
		bool OXIDIZER_MANIFOLD_VALVE_CLOSE[15];

		unsigned short FF1_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM4_CH0_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[0] = (FF1_IOM4_CH0 & 0x0080) != 0;// 7 - F_FU_MANF_ISOV_1_OP
		FUEL_MANIFOLD_VALVE_CLOSE[0] = (FF1_IOM4_CH0 & 0x0100) != 0;// 8 - F_FU_MANF_ISOV_1_CL
		unsigned short FF1_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM12_CH0_DATA );
		OXIDIZER_MANIFOLD_VALVE_OPEN[0] = (FF1_IOM12_CH0 & 0x0080) != 0;// 7 - F_OX_MANF_ISOV_1_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[0] = (FF1_IOM12_CH0 & 0x0100) != 0;// 8 - F_OX_MANF_ISOV_1_CL
		unsigned short FF2_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM4_CH0_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[1] = (FF2_IOM4_CH0 & 0x0080) != 0;// 7 - F_FU_MANF_ISOV_2_OP
		FUEL_MANIFOLD_VALVE_CLOSE[1] = (FF2_IOM4_CH0 & 0x0100) != 0;// 8 - F_FU_MANF_ISOV_2_CL
		unsigned short FF2_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM12_CH0_DATA );
		OXIDIZER_MANIFOLD_VALVE_OPEN[1] = (FF2_IOM12_CH0 & 0x0080) != 0;// 7 - F_OX_MANF_ISOV_2_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[1] = (FF2_IOM12_CH0 & 0x0100) != 0;// 8 - F_OX_MANF_ISOV_2_CL
		unsigned short FF3_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM4_CH0_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[3] = (FF3_IOM4_CH0 & 0x0080) != 0;// 7 - F_FU_MANF_ISOV_4_OP
		FUEL_MANIFOLD_VALVE_CLOSE[3] = (FF3_IOM4_CH0 & 0x0100) != 0;// 8 - F_FU_MANF_ISOV_4_CL
		FUEL_MANIFOLD_VALVE_OPEN[4] = (FF3_IOM4_CH0 & 0x0800) != 0;// 11 - F_FU_MANF_ISOV_5_OP
		FUEL_MANIFOLD_VALVE_CLOSE[4] = (FF3_IOM4_CH0 & 0x1000) != 0;// 12 - F_FU_MANF_ISOV_5_CL
		unsigned short FF3_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM12_CH0_DATA );
		OXIDIZER_MANIFOLD_VALVE_OPEN[3] = (FF3_IOM12_CH0 & 0x0080) != 0;// 7 - F_OX_MANF_ISOV_4_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[3] = (FF3_IOM12_CH0 & 0x0100) != 0;// 8 - F_OX_MANF_ISOV_4_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[4] = (FF3_IOM12_CH0 & 0x0800) != 0;// 11 - F_OX_MANF_ISOV_5_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[4] = (FF3_IOM12_CH0 & 0x1000) != 0;// 12 - F_OX_MANF_ISOV_5_CL
		unsigned short FF4_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM4_CH0_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[2] = (FF4_IOM4_CH0 & 0x0080) != 0;// 7 - F_FU_MANF_ISOV_3_OP
		FUEL_MANIFOLD_VALVE_CLOSE[2] = (FF4_IOM4_CH0 & 0x0100) != 0;// 8 - F_FU_MANF_ISOV_3_CL
		unsigned short FF4_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM12_CH0_DATA );
		OXIDIZER_MANIFOLD_VALVE_OPEN[2] = (FF4_IOM12_CH0 & 0x0080) != 0;// 7 - F_OX_MANF_ISOV_3_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[2] = (FF4_IOM12_CH0 & 0x0100) != 0;// 8 - F_OX_MANF_ISOV_3_CL
		unsigned short FA1_IOM3_CH2 = ReadCOMPOOL_IS( SCP_FA1_IOM3_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[10] = (FA1_IOM3_CH2 & 0x0001) != 0;// 0 - R_FU_MANF_ISOV_1_OP
		FUEL_MANIFOLD_VALVE_CLOSE[10] = (FA1_IOM3_CH2 & 0x0002) != 0;// 1 - R_FU_MANF_ISOV_1_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[10] = (FA1_IOM3_CH2 & 0x0004) != 0;// 2 - R_OX_MANF_ISOV_1_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[10] = (FA1_IOM3_CH2 & 0x0008) != 0;// 3 - R_OX_MANF_ISOV_1_CL
		unsigned short FA1_IOM11_CH2 = ReadCOMPOOL_IS( SCP_FA1_IOM11_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[5] = (FA1_IOM11_CH2 & 0x0001) != 0;// 0 - L_FU_MANF_ISOV_1_OP
		FUEL_MANIFOLD_VALVE_CLOSE[5] = (FA1_IOM11_CH2 & 0x0002) != 0;// 1 - L_FU_MANF_ISOV_1_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[5] = (FA1_IOM11_CH2 & 0x0004) != 0;// 2 - L_OX_MANF_ISOV_1_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[5] = (FA1_IOM11_CH2 & 0x0008) != 0;// 3 - L_OX_MANF_ISOV_1_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[9] = (FA1_IOM11_CH2 & 0x1000) != 0;// 12 - L_OX_MANF_ISOV_5_OP
		FUEL_MANIFOLD_VALVE_OPEN[9] = (FA1_IOM11_CH2 & 0x2000) != 0;// 13 - L_FU_MANF_ISOV_5_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[9] = (FA1_IOM11_CH2 & 0x4000) != 0;// 14 - L_OX_MANF_ISOV_5_CL
		FUEL_MANIFOLD_VALVE_CLOSE[9] = (FA1_IOM11_CH2 & 0x8000) != 0;// 15 - L_FU_MANF_ISOV_5_CL
		unsigned short FA2_IOM3_CH2 = ReadCOMPOOL_IS( SCP_FA2_IOM3_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[12] = (FA2_IOM3_CH2 & 0x0001) != 0;// 0 - R_FU_MANF_ISOV_3_OP
		FUEL_MANIFOLD_VALVE_CLOSE[12] = (FA2_IOM3_CH2 & 0x0002) != 0;// 1 - R_FU_MANF_ISOV_3_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[12] = (FA2_IOM3_CH2 & 0x0004) != 0;// 2 - R_OX_MANF_ISOV_3_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[12] = (FA2_IOM3_CH2 & 0x0008) != 0;// 3 - R_OX_MANF_ISOV_3_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[14] = (FA2_IOM3_CH2 & 0x1000) != 0;// 12 - R_OX_MANF_ISOV_5_OP
		FUEL_MANIFOLD_VALVE_OPEN[14] = (FA2_IOM3_CH2 & 0x2000) != 0;// 13 - R_FU_MANF_ISOV_5_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[14] = (FA2_IOM3_CH2 & 0x4000) != 0;// 14 - R_OX_MANF_ISOV_5_CL
		FUEL_MANIFOLD_VALVE_CLOSE[14] = (FA2_IOM3_CH2 & 0x8000) != 0;// 15 - R_FU_MANF_ISOV_5_CL
		unsigned short FA2_IOM11_CH2 = ReadCOMPOOL_IS( SCP_FA2_IOM11_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[7] = (FA2_IOM11_CH2 & 0x0001) != 0;// 0 - L_FU_MANF_ISOV_3_OP
		FUEL_MANIFOLD_VALVE_CLOSE[7] = (FA2_IOM11_CH2 & 0x0002) != 0;// 1 - L_FU_MANF_ISOV_3_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[7] = (FA2_IOM11_CH2 & 0x0004) != 0;// 2 - L_OX_MANF_ISOV_3_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[7] = (FA2_IOM11_CH2 & 0x0008) != 0;// 3 - L_OX_MANF_ISOV_3_CL
		unsigned short FA3_IOM3_CH2 = ReadCOMPOOL_IS( SCP_FA3_IOM3_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[11] = (FA3_IOM3_CH2 & 0x0001) != 0;// 0 - R_FU_MANF_ISOV_2_OP
		FUEL_MANIFOLD_VALVE_CLOSE[11] = (FA3_IOM3_CH2 & 0x0002) != 0;// 1 - R_FU_MANF_ISOV_2_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[11] = (FA3_IOM3_CH2 & 0x0004) != 0;// 2 - R_OX_MANF_ISOV_2_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[11] = (FA3_IOM3_CH2 & 0x0008) != 0;// 3 - R_OX_MANF_ISOV_2_CL
		unsigned short FA3_IOM11_CH2 = ReadCOMPOOL_IS( SCP_FA3_IOM11_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[6] = (FA3_IOM11_CH2 & 0x0001) != 0;// 0 - L_FU_MANF_ISOV_2_OP
		FUEL_MANIFOLD_VALVE_CLOSE[6] = (FA3_IOM11_CH2 & 0x0002) != 0;// 1 - L_FU_MANF_ISOV_2_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[6] = (FA3_IOM11_CH2 & 0x0004) != 0;// 2 - L_OX_MANF_ISOV_2_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[6] = (FA3_IOM11_CH2 & 0x0008) != 0;// 3 - L_OX_MANF_ISOV_2_CL
		unsigned short FA4_IOM3_CH2 = ReadCOMPOOL_IS( SCP_FA4_IOM3_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[13] = (FA4_IOM3_CH2 & 0x0001) != 0;// 0 - R_FU_MANF_ISOV_4_OP
		FUEL_MANIFOLD_VALVE_CLOSE[13] = (FA4_IOM3_CH2 & 0x0002) != 0;// 1 - R_FU_MANF_ISOV_4_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[13] = (FA4_IOM3_CH2 & 0x0004) != 0;// 2 - R_OX_MANF_ISOV_4_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[13] = (FA4_IOM3_CH2 & 0x0008) != 0;// 3 - R_OX_MANF_ISOV_4_CL
		unsigned short FA4_IOM11_CH2 = ReadCOMPOOL_IS( SCP_FA4_IOM11_CH2_DATA );
		FUEL_MANIFOLD_VALVE_OPEN[8] = (FA4_IOM11_CH2 & 0x0001) != 0;// 0 - L_FU_MANF_ISOV_4_OP
		FUEL_MANIFOLD_VALVE_CLOSE[8] = (FA4_IOM11_CH2 & 0x0002) != 0;// 1 - L_FU_MANF_ISOV_4_CL
		OXIDIZER_MANIFOLD_VALVE_OPEN[8] = (FA4_IOM11_CH2 & 0x0004) != 0;// 2 - L_OX_MANF_ISOV_4_OP
		OXIDIZER_MANIFOLD_VALVE_CLOSE[8] = (FA4_IOM11_CH2 & 0x0008) != 0;// 3 - L_OX_MANF_ISOV_4_CL

		bool RCS_MANIFOLD_OP_CL_STATUS[15];
		bool RCS_MANF_RM_DILEMMA_FLAG[15];
		for (int i = 0; i < 15; i++)
		{
			RCS_MANIFOLD_OP_CL_STATUS[i] = ReadCOMPOOL_AIS( SCP_RCS_MANIFOLD_OP_CL_STATUS, i + 1, 15 );
			RCS_MANF_RM_DILEMMA_FLAG[i] = ReadCOMPOOL_AIS( SCP_RCS_MANF_RM_DILEMMA_FLAG, i + 1, 15 );
		}

		bool RCS_MANF_OP_CL_STATUS_OVRD;
		bool RCS_MANF_XX_OP_CL_STAT_OVRD[15];
		RCS_MANF_OP_CL_STATUS_OVRD = ReadCOMPOOL_IS( SCP_RCS_MANF_OP_CL_STATUS_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[0] = ReadCOMPOOL_IS( SCP_RCS_MANF_F1_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[1] = ReadCOMPOOL_IS( SCP_RCS_MANF_F2_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[2] = ReadCOMPOOL_IS( SCP_RCS_MANF_F3_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[3] = ReadCOMPOOL_IS( SCP_RCS_MANF_F4_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[4] = ReadCOMPOOL_IS( SCP_RCS_MANF_F5_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[5] = ReadCOMPOOL_IS( SCP_RCS_MANF_L1_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[6] = ReadCOMPOOL_IS( SCP_RCS_MANF_L2_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[7] = ReadCOMPOOL_IS( SCP_RCS_MANF_L3_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[8] = ReadCOMPOOL_IS( SCP_RCS_MANF_L4_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[9] = ReadCOMPOOL_IS( SCP_RCS_MANF_L5_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[10] = ReadCOMPOOL_IS( SCP_RCS_MANF_R1_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[11] = ReadCOMPOOL_IS( SCP_RCS_MANF_R2_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[12] = ReadCOMPOOL_IS( SCP_RCS_MANF_R3_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[13] = ReadCOMPOOL_IS( SCP_RCS_MANF_R4_OP_CL_STAT_OVRD );
		RCS_MANF_XX_OP_CL_STAT_OVRD[14] = ReadCOMPOOL_IS( SCP_RCS_MANF_R5_OP_CL_STAT_OVRD );

		for (int i = 0; i < 15; i++)
		{
			// check for power fail (after first strike)
			if ((PWR_FAIL_PASS_CNT[i] != 0) && (PWR_FAIL_SET[i] == false))
			{
				if ((i >= 5) && !FUEL_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i] &&
						!FUEL_MANIFOLD_VALVE_CLOSE[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i])
				{
					// check opposite manifold for power fail
					int offset = 5;// check right manif
					if (i >= 10) offset = -5;// check left manif

					if (!FUEL_MANIFOLD_VALVE_OPEN[i + offset] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i + offset] &&
						!FUEL_MANIFOLD_VALVE_CLOSE[i + offset] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i + offset])
					{
						PWR_FAIL_PASS_CNT[i]++;
						if (PWR_FAIL_PASS_CNT[i] >= PWR_FAIL_PASS_CNT_LT)
						{
							PWR_FAIL_SET[i] = true;
							PWR_FAIL_PASS_CNT[i] = 0;
							WriteCOMPOOL_IS( SCP_RCS_POWER_FAIL_FLAG, 1 );
						}
					}
				}
			}

			// check for dilemma (after first strike)
			if (MANF_DILEM_PASS_CONT[i] != 0)
			{
				if ((!FUEL_MANIFOLD_VALVE_OPEN[i] && !FUEL_MANIFOLD_VALVE_CLOSE[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i]) ||
					(!FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !FUEL_MANIFOLD_VALVE_CLOSE[i]) ||
					(!FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i]) ||
					(FUEL_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !FUEL_MANIFOLD_VALVE_CLOSE[i]) || 
					(FUEL_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i]) || 
					(FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && FUEL_MANIFOLD_VALVE_CLOSE[i] && OXIDIZER_MANIFOLD_VALVE_CLOSE[i]))
				{
					MANF_DILEM_PASS_CONT[i]++;
					if (MANF_DILEM_PASS_CONT[i] >= MANF_DILEM_PASS_CONT_LT)
					{
						RCS_MANF_RM_DILEMMA_FLAG[i] = true;
						MANF_DILEM_PASS_CONT[i] = 0;
					}
				}
				// else vars reset below
			}

			// handle manual override requests
			RCS_MANIFOLD_OP_CL_STATUS[i] = (RCS_MANF_OP_CL_STATUS_OVRD && RCS_MANF_RM_DILEMMA_FLAG[i]) || (RCS_MANF_XX_OP_CL_STAT_OVRD[i] && !RCS_MANIFOLD_OP_CL_STATUS[i]) || (!RCS_MANF_XX_OP_CL_STAT_OVRD[i] && RCS_MANIFOLD_OP_CL_STATUS[i]);

			// check for change in manif vlvs
			if ((FUEL_MANIFOLD_VALVE_OPEN[i] != FUEL_MANIFOLD_VALVE_OPEN_PV[i]) || (OXIDIZER_MANIFOLD_VALVE_OPEN[i] != OXIDIZER_MANIFOLD_VALVE_OPEN_PV[i]) ||
				(FUEL_MANIFOLD_VALVE_CLOSE[i] != FUEL_MANIFOLD_VALVE_CLOSE_PV[i]) || (OXIDIZER_MANIFOLD_VALVE_CLOSE[i] != OXIDIZER_MANIFOLD_VALVE_CLOSE_PV[i]))
			{
				// reset dilemma vars
				RCS_MANF_RM_DILEMMA_FLAG[i] = false;
				MANF_DILEM_PASS_CONT[i] = 0;

				// (aft only) check if all indications are off, for power fail checks (first strike)
				if ((i >= 5) && !FUEL_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i] &&
					!FUEL_MANIFOLD_VALVE_CLOSE[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i])
				{
					// check opposite manifold for power fail
					int offset = 5;// check right manif
					if (i >= 10) offset = -5;// check left manif

					if (!FUEL_MANIFOLD_VALVE_OPEN[i + offset] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i + offset] &&
						!FUEL_MANIFOLD_VALVE_CLOSE[i + offset] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i + offset])
					{
						// start counting
						PWR_FAIL_PASS_CNT[i]++;

						// keep current RCS_MANIFOLD_OP_CL_STATUS[i]
						RCS_MANF_RM_DILEMMA_FLAG[i] = false;
					}
					else
					{
						RCS_MANIFOLD_OP_CL_STATUS[i] = false;
						RCS_MANF_RM_DILEMMA_FLAG[i] = true;
					}
				}
				else
				{
					// manifold status
					RCS_MANIFOLD_OP_CL_STATUS[i] = (FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !FUEL_MANIFOLD_VALVE_CLOSE[i]) ||
						(FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i]);

					// detect dilemma (first strike)
					if ((!FUEL_MANIFOLD_VALVE_OPEN[i] && !FUEL_MANIFOLD_VALVE_CLOSE[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i]) ||
						(!FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !FUEL_MANIFOLD_VALVE_CLOSE[i]) ||
						(!FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i]) ||
						(FUEL_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !FUEL_MANIFOLD_VALVE_CLOSE[i]) ||
						(FUEL_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_OPEN[i] && !OXIDIZER_MANIFOLD_VALVE_CLOSE[i]) ||
						(FUEL_MANIFOLD_VALVE_OPEN[i] && OXIDIZER_MANIFOLD_VALVE_OPEN[i] && FUEL_MANIFOLD_VALVE_CLOSE[i] && OXIDIZER_MANIFOLD_VALVE_CLOSE[i]))
					{
						// start counting
						MANF_DILEM_PASS_CONT[i]++;
					}
				}

				// save for next cycle
				FUEL_MANIFOLD_VALVE_OPEN_PV[i] = FUEL_MANIFOLD_VALVE_OPEN[i];
				OXIDIZER_MANIFOLD_VALVE_OPEN_PV[i] = OXIDIZER_MANIFOLD_VALVE_OPEN[i];
				FUEL_MANIFOLD_VALVE_CLOSE_PV[i] = FUEL_MANIFOLD_VALVE_CLOSE[i];
				OXIDIZER_MANIFOLD_VALVE_CLOSE_PV[i] = OXIDIZER_MANIFOLD_VALVE_CLOSE[i];
			}
		}

		// output
		for (int i = 0; i < 15; i++)
		{
			WriteCOMPOOL_AIS( SCP_RCS_MANIFOLD_OP_CL_STATUS, i + 1, RCS_MANIFOLD_OP_CL_STATUS[i] ? 1 : 0, 15 );
			WriteCOMPOOL_AIS( SCP_RCS_MANF_RM_DILEMMA_FLAG, i + 1, RCS_MANF_RM_DILEMMA_FLAG[i] ? 1 : 0, 15 );
		}
		WriteCOMPOOL_IS( SCP_RCS_MANF_OP_CL_STATUS_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_F1_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_F2_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_F3_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_F4_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_F5_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_L1_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_L2_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_L3_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_L4_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_L5_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_R1_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_R2_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_R3_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_R4_OP_CL_STAT_OVRD, 0 );
		WriteCOMPOOL_IS( SCP_RCS_MANF_R5_OP_CL_STAT_OVRD, 0 );
		return;
	}

	void RCS_RM::JET_FAULT_LIMIT( void )
	{
		/*
		in
		JET-FAILED-OFF-INDICATION discretes (44) <JET-FAILED-OFF MONITOR>
		JET-LEAK-INDICATION discretes (44) <JET-LEAK MONITOR>
		JET-DES-INHIBIT discretes (44) <RCS SPEC FUNCTION>
		JET DESELECT discretes (44) <RCS SPEC FUNCTION>
		RCS-LEFT-JET-FAIL-LIMIT integer (1) <RCS SPEC FUNCTION>
		RCS-RIGHT-JET-FAIL-LIMIT integer (1) <RCS SPEC FUNCTION>
		RCS-FORWARD-JET-FAIL-LIMIT integer(1) <RCS SPEC FUNCTION>
		MANIFOLD OPEN/CLOSE statuses (15) <MANIFOLD STATUS MODULE>
		JET RESET discrete (1) <RCS SPEC FUNCTION>
		
		out
		JET DESELECT discretes (44)
		*/

		bool JET_DESELECT[44];
		for (int i = 0; i < 44; i++) JET_DESELECT[i] = ReadCOMPOOL_AIS( SCP_JET_DESELECT, i + 1, 44 );
		return;
	}

	void RCS_RM::JET_PRIORITY_STATUS_TABLE( void )
	{
		/*
		in
		JET DES inhibit discretes (44)
		
		out
		JET PRIORITY STATUS TABLE (38)
		JET STATUS CHANGE discrete (1)
		*/
		constexpr unsigned short GROUP_LAST_JET[38] = {
			3, 3, 3,
			5, 5,
			7, 7,
			10, 10, 10,
			12, 12,
			14, 14,
			16, 16,
			18, 18,
			22, 22, 22, 22,
			26, 26, 26, 26,
			29, 29, 29,
			32, 32, 32,
			35, 35, 35,
			38, 38, 38
		};// last index of current group

		constexpr unsigned short MAP_FWD_TO_44[16] = {1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 9, 10, 11, 12};// maps indexes in fwd RCS list to complete 44-jet list indexes
		constexpr unsigned short MAP_AFT_TO_44[28] = {17, 18, 19, 31, 32, 33, 29, 30, 23, 24, 25, 37, 38, 39, 44, 43, 20, 21, 22, 34, 35, 36, 26, 27, 28, 40, 41, 42};// maps indexes in fwd RCS list to complete 44-jet list indexes

		bool JET_DES_INHIBIT[44];
		for (int i = 0; i < 44; i++) JET_DES_INHIBIT[i] = ReadCOMPOOL_AIS( SCP_JET_DES_INHIBIT, i + 1, 44 );

		unsigned short JET_MAP_ELEMENT[38];
		for (int i = 0; i < 38; i++) JET_MAP_ELEMENT[i] = ReadCOMPOOL_AIS( SCP_JET_MAP_ELEMENT, i + 1, 38 );

		bool JET_FAIL_CHANGE_FLAG = false;

		for (int i = 0; i < 16; i++)
		{
			if (JET_DES_INHIBIT[i] && !JET_DES_INHIBIT_PV[i])
			{
				for (int j = 0; j < 14; j++)
				{
					if (MAP_FWD_TO_44[JET_MAP_ELEMENT[j] - 1] == (i + 1))
					{
						for (int k = j; k < (GROUP_LAST_JET[j] - 1); k++)
						{
							unsigned int tmpjet = JET_MAP_ELEMENT[k + 1];
							JET_MAP_ELEMENT[k + 1] = JET_MAP_ELEMENT[k];
							JET_MAP_ELEMENT[k] = tmpjet;
						}

						JET_FAIL_CHANGE_FLAG = true;
						break;
					}
				}
			}
		}

		for (int i = 16; i < 44; i++)
		{
			if (JET_DES_INHIBIT[i] && !JET_DES_INHIBIT_PV[i])
			{
				for (int j = 14; j < 38; j++)
				{
					if (MAP_AFT_TO_44[JET_MAP_ELEMENT[j] - 1] == (i + 1))
					{
						for (int k = j; k < (GROUP_LAST_JET[j] - 1); k++)
						{
							unsigned int tmpjet = JET_MAP_ELEMENT[k + 1];
							JET_MAP_ELEMENT[k + 1] = JET_MAP_ELEMENT[k];
							JET_MAP_ELEMENT[k] = tmpjet;
						}

						JET_FAIL_CHANGE_FLAG = true;
						break;
					}
				}
			}
		}

		for (int i = 0; i < 38; i++) WriteCOMPOOL_AIS( SCP_JET_MAP_ELEMENT, i + 1, JET_MAP_ELEMENT[i], 38 );
		if (JET_FAIL_CHANGE_FLAG) WriteCOMPOOL_IS( SCP_JET_FAIL_CHANGE_FLAG, 1 );

		// save for next time
		for (int i = 0; i < 44; i++) JET_DES_INHIBIT_PV[i] = JET_DES_INHIBIT[i];
		return;
	}
}
