#include "Switch_RM.h"


namespace dps
{
	unsigned short getbit( const unsigned short wd, const unsigned char pos )
	{
		// TODO assert pos
		unsigned short shf = 1 << pos;
		return (wd & shf) >> pos;
	}

	Switch_RM::Switch_RM( SimpleGPCSystem *_gpc ):SimpleGPCSoftware( _gpc, "Switch_RM" )
	{
		return;
	}

	Switch_RM::~Switch_RM( void )
	{
		return;
	}

	void Switch_RM::OnPreStep( double simt, double simdt, double mjd )
	{
		unsigned short FF1_IOM6_CH1 = ReadCOMPOOL_IS( SCP_FF1_IOM6_CH1_DATA );
		unsigned short FF2_IOM6_CH1 = ReadCOMPOOL_IS( SCP_FF2_IOM6_CH1_DATA );
		unsigned short FF3_IOM15_CH1 = ReadCOMPOOL_IS( SCP_FF3_IOM15_CH1_DATA );
		unsigned short FF4_IOM15_CH1 = ReadCOMPOOL_IS( SCP_FF4_IOM15_CH1_DATA );
		unsigned short FF1_IOM12_CH1 = ReadCOMPOOL_IS( SCP_FF1_IOM12_CH1_DATA );
		unsigned short FF2_IOM12_CH1 = ReadCOMPOOL_IS( SCP_FF2_IOM12_CH1_DATA );
		unsigned short FF3_IOM12_CH1 = ReadCOMPOOL_IS( SCP_FF3_IOM12_CH1_DATA );
		unsigned short FF4_IOM12_CH1 = ReadCOMPOOL_IS( SCP_FF4_IOM12_CH1_DATA );
		unsigned short FF1_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM12_CH0_DATA );
		unsigned short FF2_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM12_CH0_DATA );
		unsigned short FF3_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM12_CH0_DATA );
		unsigned short FF4_IOM12_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM12_CH0_DATA );

		// LH_RHC_PLUS_PITCH_TRIM
		bool LH_RHC_PLUS_PITCH_TRIM_A = ((FF1_IOM6_CH1 & 0x0002) != 0);
		bool LH_RHC_PLUS_PITCH_TRIM_B = ((FF2_IOM6_CH1 & 0x0002) != 0);
		WriteCOMPOOL_IS( SCP_LH_RHC_PLUS_PITCH_TRIM, LH_RHC_PLUS_PITCH_TRIM_A & LH_RHC_PLUS_PITCH_TRIM_B );
		// LH_RHC_MINUS_PITCH_TRIM
		bool LH_RHC_MINUS_PITCH_TRIM_A = ((FF1_IOM6_CH1 & 0x0004) != 0);
		bool LH_RHC_MINUS_PITCH_TRIM_B = ((FF2_IOM6_CH1 & 0x0004) != 0);
		WriteCOMPOOL_IS( SCP_LH_RHC_MINUS_PITCH_TRIM, LH_RHC_MINUS_PITCH_TRIM_A & LH_RHC_MINUS_PITCH_TRIM_B );
		// LH_RHC_PLUS_ROLL_TRIM
		bool LH_RHC_PLUS_ROLL_TRIM_A = ((FF1_IOM6_CH1 & 0x0008) != 0);
		bool LH_RHC_PLUS_ROLL_TRIM_B = ((FF2_IOM6_CH1 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_LH_RHC_PLUS_ROLL_TRIM, LH_RHC_PLUS_ROLL_TRIM_A & LH_RHC_PLUS_ROLL_TRIM_B );
		// LH_RHC_MINUS_ROLL_TRIM
		bool LH_RHC_MINUS_ROLL_TRIM_A = ((FF1_IOM6_CH1 & 0x0010) != 0);
		bool LH_RHC_MINUS_ROLL_TRIM_B = ((FF2_IOM6_CH1 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_LH_RHC_MINUS_ROLL_TRIM, LH_RHC_MINUS_ROLL_TRIM_A & LH_RHC_MINUS_ROLL_TRIM_B );
		// RH_RHC_PLUS_PITCH_TRIM
		bool RH_RHC_PLUS_PITCH_TRIM_A = ((FF3_IOM15_CH1 & 0x0002) != 0);
		bool RH_RHC_PLUS_PITCH_TRIM_B = ((FF4_IOM15_CH1 & 0x0002) != 0);
		WriteCOMPOOL_IS( SCP_RH_RHC_PLUS_PITCH_TRIM, RH_RHC_PLUS_PITCH_TRIM_A & RH_RHC_PLUS_PITCH_TRIM_B );
		// RH_RHC_MINUS_PITCH_TRIM
		bool RH_RHC_MINUS_PITCH_TRIM_A = ((FF3_IOM15_CH1 & 0x0004) != 0);
		bool RH_RHC_MINUS_PITCH_TRIM_B = ((FF4_IOM15_CH1 & 0x0004) != 0);
		WriteCOMPOOL_IS( SCP_RH_RHC_MINUS_PITCH_TRIM, RH_RHC_MINUS_PITCH_TRIM_A & RH_RHC_MINUS_PITCH_TRIM_B );
		// RH_RHC_PLUS_ROLL_TRIM
		bool RH_RHC_PLUS_ROLL_TRIM_A = ((FF3_IOM15_CH1 & 0x0008) != 0);
		bool RH_RHC_PLUS_ROLL_TRIM_B = ((FF4_IOM15_CH1 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_RH_RHC_PLUS_ROLL_TRIM, RH_RHC_PLUS_ROLL_TRIM_A & RH_RHC_PLUS_ROLL_TRIM_B );
		// RH_RHC_MINUS_ROLL_TRIM
		bool RH_RHC_MINUS_ROLL_TRIM_A = ((FF3_IOM15_CH1 & 0x0010) != 0);
		bool RH_RHC_MINUS_ROLL_TRIM_B = ((FF4_IOM15_CH1 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_RH_RHC_MINUS_ROLL_TRIM, RH_RHC_MINUS_ROLL_TRIM_A & RH_RHC_MINUS_ROLL_TRIM_B );

		// LH_RHC_TRIM_INHIBIT
		bool LH_RHC_TRIM_INHIBIT_A = ((FF1_IOM12_CH1 & 0x0100) != 0);
		bool LH_RHC_TRIM_INHIBIT_B = ((FF2_IOM12_CH1 & 0x0100) != 0);
		WriteCOMPOOL_IS( SCP_LH_RHC_TRIM_INHIBIT, LH_RHC_TRIM_INHIBIT_A & LH_RHC_TRIM_INHIBIT_B );
		// RH_RHC_TRIM_INHIBIT
		bool RH_RHC_TRIM_INHIBIT_A = ((FF3_IOM12_CH1 & 0x0100) != 0);
		bool RH_RHC_TRIM_INHIBIT_B = ((FF4_IOM12_CH1 & 0x0100) != 0);
		WriteCOMPOOL_IS( SCP_RH_RHC_TRIM_INHIBIT, RH_RHC_TRIM_INHIBIT_A & RH_RHC_TRIM_INHIBIT_B );

		// LH_PLUS_PITCH_TRIM
		bool LH_PLUS_PITCH_TRIM_A = ((FF1_IOM12_CH0 & 0x0002) != 0);
		bool LH_PLUS_PITCH_TRIM_B = ((FF2_IOM12_CH0 & 0x0002) != 0);
		WriteCOMPOOL_IS( SCP_LH_PLUS_PITCH_TRIM, LH_PLUS_PITCH_TRIM_A & LH_PLUS_PITCH_TRIM_B );
		// LH_MINUS_PITCH_TRIM
		bool LH_MINUS_PITCH_TRIM_A = ((FF1_IOM12_CH0 & 0x0004) != 0);
		bool LH_MINUS_PITCH_TRIM_B = ((FF2_IOM12_CH0 & 0x0004) != 0);
		WriteCOMPOOL_IS( SCP_LH_MINUS_PITCH_TRIM, LH_MINUS_PITCH_TRIM_A & LH_MINUS_PITCH_TRIM_B );
		// LH_PLUS_ROLL_TRIM
		bool LH_PLUS_ROLL_TRIM_A = ((FF1_IOM12_CH0 & 0x0008) != 0);
		bool LH_PLUS_ROLL_TRIM_B = ((FF2_IOM12_CH0 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_LH_PLUS_ROLL_TRIM, LH_PLUS_ROLL_TRIM_A & LH_PLUS_ROLL_TRIM_B );
		// LH_MINUS_ROLL_TRIM
		bool LH_MINUS_ROLL_TRIM_A = ((FF1_IOM12_CH0 & 0x0010) != 0);
		bool LH_MINUS_ROLL_TRIM_B = ((FF2_IOM12_CH0 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_LH_MINUS_ROLL_TRIM, LH_MINUS_ROLL_TRIM_A & LH_MINUS_ROLL_TRIM_B );
		// LH_PLUS_YAW_TRIM
		bool LH_PLUS_YAW_TRIM_A = ((FF1_IOM12_CH0 & 0x0020) != 0);
		bool LH_PLUS_YAW_TRIM_B = ((FF2_IOM12_CH0 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_LH_PLUS_YAW_TRIM, LH_PLUS_YAW_TRIM_A & LH_PLUS_YAW_TRIM_B );
		// LH_MINUS_YAW_TRIM
		bool LH_MINUS_YAW_TRIM_A = ((FF1_IOM12_CH0 & 0x0040) != 0);
		bool LH_MINUS_YAW_TRIM_B = ((FF2_IOM12_CH0 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_LH_MINUS_YAW_TRIM, LH_MINUS_YAW_TRIM_A & LH_MINUS_YAW_TRIM_B );
		// RH_PLUS_PITCH_TRIM
		bool RH_PLUS_PITCH_TRIM_A = ((FF3_IOM12_CH0 & 0x0002) != 0);
		bool RH_PLUS_PITCH_TRIM_B = ((FF4_IOM12_CH0 & 0x0002) != 0);
		WriteCOMPOOL_IS( SCP_RH_PLUS_PITCH_TRIM, RH_PLUS_PITCH_TRIM_A & RH_PLUS_PITCH_TRIM_B );
		// RH_MINUS_PITCH_TRIM
		bool RH_MINUS_PITCH_TRIM_A = ((FF3_IOM12_CH0 & 0x0004) != 0);
		bool RH_MINUS_PITCH_TRIM_B = ((FF4_IOM12_CH0 & 0x0004) != 0);
		WriteCOMPOOL_IS( SCP_RH_MINUS_PITCH_TRIM, RH_MINUS_PITCH_TRIM_A & RH_MINUS_PITCH_TRIM_B );
		// RH_PLUS_ROLL_TRIM
		bool RH_PLUS_ROLL_TRIM_A = ((FF3_IOM12_CH0 & 0x0008) != 0);
		bool RH_PLUS_ROLL_TRIM_B = ((FF4_IOM12_CH0 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_RH_PLUS_ROLL_TRIM, RH_PLUS_ROLL_TRIM_A & RH_PLUS_ROLL_TRIM_B );
		// RH_MINUS_ROLL_TRIM
		bool RH_MINUS_ROLL_TRIM_A = ((FF3_IOM12_CH0 & 0x0010) != 0);
		bool RH_MINUS_ROLL_TRIM_B = ((FF4_IOM12_CH0 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_RH_MINUS_ROLL_TRIM, RH_MINUS_ROLL_TRIM_A & RH_MINUS_ROLL_TRIM_B );
		// RH_PLUS_YAW_TRIM
		bool RH_PLUS_YAW_TRIM_A = ((FF3_IOM12_CH0 & 0x0020) != 0);
		bool RH_PLUS_YAW_TRIM_B = ((FF4_IOM12_CH0 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_RH_PLUS_YAW_TRIM, RH_PLUS_YAW_TRIM_A & RH_PLUS_YAW_TRIM_B );
		// RH_MINUS_YAW_TRIM
		bool RH_MINUS_YAW_TRIM_A = ((FF3_IOM12_CH0 & 0x0040) != 0);
		bool RH_MINUS_YAW_TRIM_B = ((FF4_IOM12_CH0 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_RH_MINUS_YAW_TRIM, RH_MINUS_YAW_TRIM_A & RH_MINUS_YAW_TRIM_B );


		unsigned short FF1_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM4_CH0_DATA );
		unsigned short FF2_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM4_CH0_DATA );
		unsigned short FF3_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM4_CH0_DATA );
		unsigned short FF4_IOM4_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM4_CH0_DATA );

		// LH_BODY_FLAP_UP
		bool LH_BODY_FLAP_UP_A = ((FF1_IOM4_CH0 & 0x0008) != 0);
		bool LH_BODY_FLAP_UP_B = ((FF2_IOM4_CH0 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_LH_BODY_FLAP_UP, LH_BODY_FLAP_UP_A & LH_BODY_FLAP_UP_B );
		// LH_BODY_FLAP_DOWN
		bool LH_BODY_FLAP_DOWN_A = ((FF1_IOM4_CH0 & 0x0010) != 0);
		bool LH_BODY_FLAP_DOWN_B = ((FF2_IOM4_CH0 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_LH_BODY_FLAP_DOWN, LH_BODY_FLAP_DOWN_A & LH_BODY_FLAP_DOWN_B );
		// RH_BODY_FLAP_UP
		bool RH_BODY_FLAP_UP_A = ((FF3_IOM4_CH0 & 0x0008) != 0);
		bool RH_BODY_FLAP_UP_B = ((FF4_IOM4_CH0 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_RH_BODY_FLAP_UP, RH_BODY_FLAP_UP_A & RH_BODY_FLAP_UP_B );
		// RH_BODY_FLAP_DOWN
		bool RH_BODY_FLAP_DOWN_A = ((FF3_IOM4_CH0 & 0x0010) != 0);
		bool RH_BODY_FLAP_DOWN_B = ((FF4_IOM4_CH0 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_RH_BODY_FLAP_DOWN, RH_BODY_FLAP_DOWN_A & RH_BODY_FLAP_DOWN_B );


		unsigned short FF1_IOM9_CH2 = ReadCOMPOOL_IS( SCP_FF1_IOM9_CH2_DATA );
		unsigned short FF2_IOM9_CH2 = ReadCOMPOOL_IS( SCP_FF2_IOM9_CH2_DATA );
		unsigned short FF3_IOM9_CH2 = ReadCOMPOOL_IS( SCP_FF3_IOM9_CH2_DATA );
		unsigned short FF4_IOM9_CH2 = ReadCOMPOOL_IS( SCP_FF4_IOM9_CH2_DATA );

		// MPS_BACKUP_LH2_PRPLT_DUMP_START
		bool MPS_BACKUP_LH2_PRPLT_DUMP_START_A = ((FF3_IOM9_CH2 & 0x0100) != 0);
		bool MPS_BACKUP_LH2_PRPLT_DUMP_START_B = ((FF4_IOM9_CH2 & 0x0100) != 0);
		WriteCOMPOOL_IS( SCP_MPS_BACKUP_LH2_PRPLT_DUMP_START, MPS_BACKUP_LH2_PRPLT_DUMP_START_A & MPS_BACKUP_LH2_PRPLT_DUMP_START_B );

		// MPS_BACKUP_LH2_PRPLT_DUMP_STOP
		bool MPS_BACKUP_LH2_PRPLT_DUMP_STOP_A = ((FF3_IOM9_CH2 & 0x0200) != 0);
		bool MPS_BACKUP_LH2_PRPLT_DUMP_STOP_B = ((FF4_IOM9_CH2 & 0x0200) != 0);
		WriteCOMPOOL_IS( SCP_MPS_BACKUP_LH2_PRPLT_DUMP_STOP, MPS_BACKUP_LH2_PRPLT_DUMP_STOP_A & MPS_BACKUP_LH2_PRPLT_DUMP_STOP_B );

		// MPS_PRPLT_DUMP_SEQUENCE_START
		bool MPS_PRPLT_DUMP_SEQUENCE_START_A = ((FF1_IOM9_CH2 & 0x0100) != 0);
		bool MPS_PRPLT_DUMP_SEQUENCE_START_B = ((FF2_IOM9_CH2 & 0x0100) != 0);
		WriteCOMPOOL_IS( SCP_MPS_PRPLT_DUMP_SEQUENCE_START, MPS_PRPLT_DUMP_SEQUENCE_START_A & MPS_PRPLT_DUMP_SEQUENCE_START_B );

		// MPS_PRPLT_DUMP_SEQUENCE_STOP
		bool MPS_PRPLT_DUMP_SEQUENCE_STOP_A = ((FF1_IOM9_CH2 & 0x0200) != 0);
		bool MPS_PRPLT_DUMP_SEQUENCE_STOP_B = ((FF2_IOM9_CH2 & 0x0200) != 0);
		WriteCOMPOOL_IS( SCP_MPS_PRPLT_DUMP_SEQUENCE_STOP, MPS_PRPLT_DUMP_SEQUENCE_STOP_A & MPS_PRPLT_DUMP_SEQUENCE_STOP_B );


		unsigned short FF2_IOM4_CH2 = ReadCOMPOOL_IS( SCP_FF2_IOM4_CH2_DATA );
		unsigned short FF3_IOM4_CH2 = ReadCOMPOOL_IS( SCP_FF3_IOM4_CH2_DATA );
		unsigned short FF4_IOM4_CH2 = ReadCOMPOOL_IS( SCP_FF4_IOM4_CH2_DATA );

		// MPS_ENG_LIMIT_CONTROL_ENABLE
		bool MPS_ENG_LIMIT_CONTROL_NO_1_ENABLE = ((FF2_IOM4_CH2 & 0x0002) != 0);
		bool MPS_ENG_LIMIT_CONTROL_NO_2_ENABLE = ((FF3_IOM4_CH2 & 0x0002) != 0);
		bool MPS_ENG_LIMIT_CONTROL_NO_3_ENABLE = ((FF4_IOM4_CH2 & 0x0002) != 0);
		WriteCOMPOOL_IS( SCP_MPS_ENG_LIMIT_CONTROL_ENABLE,
			(MPS_ENG_LIMIT_CONTROL_NO_1_ENABLE & MPS_ENG_LIMIT_CONTROL_NO_2_ENABLE) |
			(MPS_ENG_LIMIT_CONTROL_NO_1_ENABLE & MPS_ENG_LIMIT_CONTROL_NO_3_ENABLE) |
			(MPS_ENG_LIMIT_CONTROL_NO_2_ENABLE & MPS_ENG_LIMIT_CONTROL_NO_3_ENABLE) );

		// MPS_ENG_LIMIT_CONTROL_INHIBIT
		bool MPS_ENG_LIMIT_CONTROL_NO_1_INHIBIT = ((FF2_IOM4_CH2 & 0x0004) != 0);
		bool MPS_ENG_LIMIT_CONTROL_NO_2_INHIBIT = ((FF3_IOM4_CH2 & 0x0004) != 0);
		bool MPS_ENG_LIMIT_CONTROL_NO_3_INHIBIT = ((FF4_IOM4_CH2 & 0x0004) != 0);
		WriteCOMPOOL_IS( SCP_MPS_ENG_LIMIT_CONTROL_INHIBIT,
			(MPS_ENG_LIMIT_CONTROL_NO_1_INHIBIT & MPS_ENG_LIMIT_CONTROL_NO_2_INHIBIT) |
			(MPS_ENG_LIMIT_CONTROL_NO_1_INHIBIT & MPS_ENG_LIMIT_CONTROL_NO_3_INHIBIT) |
			(MPS_ENG_LIMIT_CONTROL_NO_2_INHIBIT & MPS_ENG_LIMIT_CONTROL_NO_3_INHIBIT) );

		// MPS_ENG_LIMIT_CONTROL_AUTO
		bool MPS_ENG_LIMIT_CONTROL_NO_1_AUTO = ((FF2_IOM4_CH2 & 0x0008) != 0);
		bool MPS_ENG_LIMIT_CONTROL_NO_2_AUTO = ((FF3_IOM4_CH2 & 0x0008) != 0);
		bool MPS_ENG_LIMIT_CONTROL_NO_3_AUTO = ((FF4_IOM4_CH2 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_MPS_ENG_LIMIT_CONTROL_AUTO,
			(MPS_ENG_LIMIT_CONTROL_NO_1_AUTO & MPS_ENG_LIMIT_CONTROL_NO_2_AUTO) |
			(MPS_ENG_LIMIT_CONTROL_NO_1_AUTO & MPS_ENG_LIMIT_CONTROL_NO_3_AUTO) |
			(MPS_ENG_LIMIT_CONTROL_NO_2_AUTO & MPS_ENG_LIMIT_CONTROL_NO_3_AUTO) );


		unsigned short FF4_IOM6_CH1 = ReadCOMPOOL_IS( SCP_FF4_IOM6_CH1_DATA );
		unsigned short FF3_IOM6_CH1 = ReadCOMPOOL_IS( SCP_FF3_IOM6_CH1_DATA );
		unsigned short FF1_IOM15_CH1 = ReadCOMPOOL_IS( SCP_FF1_IOM15_CH1_DATA );

		// SRB_SEPARATION_AUTO_CMD
		bool SRB_SEPARATION_AUTO_A_CMD = ((FF1_IOM6_CH1 & 0x0020) != 0);
		bool SRB_SEPARATION_AUTO_B_CMD = ((FF4_IOM6_CH1 & 0x0020) != 0);
		bool SRB_SEPARATION_AUTO_C_CMD = ((FF3_IOM6_CH1 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_SRB_SEPARATION_AUTO_CMD,
			(SRB_SEPARATION_AUTO_A_CMD & SRB_SEPARATION_AUTO_B_CMD) |
			(SRB_SEPARATION_AUTO_A_CMD & SRB_SEPARATION_AUTO_C_CMD) |
			(SRB_SEPARATION_AUTO_B_CMD & SRB_SEPARATION_AUTO_C_CMD) );

		// SRB_SEPARATION_MANUAL_AUTO_ENABLE_CMD
		bool SRB_SEPARATION_MANUAL_AUTO_ENABLE_A_CMD = ((FF1_IOM6_CH1 & 0x0040) != 0);
		bool SRB_SEPARATION_MANUAL_AUTO_ENABLE_B_CMD = ((FF4_IOM6_CH1 & 0x0040) != 0);
		bool SRB_SEPARATION_MANUAL_AUTO_ENABLE_C_CMD = ((FF3_IOM6_CH1 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_SRB_SEPARATION_MANUAL_AUTO_ENABLE_CMD,
			(SRB_SEPARATION_MANUAL_AUTO_ENABLE_A_CMD & SRB_SEPARATION_MANUAL_AUTO_ENABLE_B_CMD) |
			(SRB_SEPARATION_MANUAL_AUTO_ENABLE_A_CMD & SRB_SEPARATION_MANUAL_AUTO_ENABLE_C_CMD) |
			(SRB_SEPARATION_MANUAL_AUTO_ENABLE_B_CMD & SRB_SEPARATION_MANUAL_AUTO_ENABLE_C_CMD) );

		// SRB_SEPARATION_INITIATE_CMD
		bool SRB_SEPARATION_INITIATE_A_CMD = ((FF1_IOM6_CH1 & 0x0080) != 0);
		bool SRB_SEPARATION_INITIATE_B_CMD = ((FF4_IOM6_CH1 & 0x0080) != 0);
		bool SRB_SEPARATION_INITIATE_C_CMD = ((FF3_IOM6_CH1 & 0x0080) != 0);
		WriteCOMPOOL_IS( SCP_SRB_SEPARATION_INITIATE_CMD,
			(SRB_SEPARATION_INITIATE_A_CMD & SRB_SEPARATION_INITIATE_B_CMD) |
			(SRB_SEPARATION_INITIATE_A_CMD & SRB_SEPARATION_INITIATE_C_CMD) |
			(SRB_SEPARATION_INITIATE_B_CMD & SRB_SEPARATION_INITIATE_C_CMD) );

		// ET_SEPARATION_MANUAL_ENABLE_CMD
		bool ET_SEPARATION_MANUAL_ENABLE_A_CMD = ((FF1_IOM15_CH1 & 0x0020) != 0);
		bool ET_SEPARATION_MANUAL_ENABLE_B_CMD = ((FF4_IOM15_CH1 & 0x0020) != 0);
		bool ET_SEPARATION_MANUAL_ENABLE_C_CMD = ((FF3_IOM15_CH1 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_ET_SEPARATION_MANUAL_ENABLE_CMD,
			(ET_SEPARATION_MANUAL_ENABLE_A_CMD & ET_SEPARATION_MANUAL_ENABLE_B_CMD) |
			(ET_SEPARATION_MANUAL_ENABLE_A_CMD & ET_SEPARATION_MANUAL_ENABLE_C_CMD) |
			(ET_SEPARATION_MANUAL_ENABLE_B_CMD & ET_SEPARATION_MANUAL_ENABLE_C_CMD) );

		// ET_SEPARATION_INITIATE_CMD
		bool ET_SEPARATION_INITIATE_A_CMD = ((FF1_IOM15_CH1 & 0x0040) != 0);
		bool ET_SEPARATION_INITIATE_B_CMD = ((FF4_IOM15_CH1 & 0x0040) != 0);
		bool ET_SEPARATION_INITIATE_C_CMD = ((FF3_IOM15_CH1 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_ET_SEPARATION_INITIATE_CMD,
			(ET_SEPARATION_INITIATE_A_CMD & ET_SEPARATION_INITIATE_B_CMD) |
			(ET_SEPARATION_INITIATE_A_CMD & ET_SEPARATION_INITIATE_C_CMD) |
			(ET_SEPARATION_INITIATE_B_CMD & ET_SEPARATION_INITIATE_C_CMD) );

		// ET_SEPARATION_AUTO_CMD
		bool ET_SEPARATION_AUTO_A_CMD = ((FF1_IOM15_CH1 & 0x0080) != 0);
		bool ET_SEPARATION_AUTO_B_CMD = ((FF4_IOM15_CH1 & 0x0080) != 0);
		bool ET_SEPARATION_AUTO_C_CMD = ((FF3_IOM15_CH1 & 0x0080) != 0);
		WriteCOMPOOL_IS( SCP_ET_SEPARATION_AUTO_CMD,
			(ET_SEPARATION_AUTO_A_CMD & ET_SEPARATION_AUTO_B_CMD) |
			(ET_SEPARATION_AUTO_A_CMD & ET_SEPARATION_AUTO_C_CMD) |
			(ET_SEPARATION_AUTO_B_CMD & ET_SEPARATION_AUTO_C_CMD) );


		unsigned short FF2_IOM9_CH1 = ReadCOMPOOL_IS( SCP_FF2_IOM9_CH1_DATA );
		unsigned short FF3_IOM9_CH1 = ReadCOMPOOL_IS( SCP_FF3_IOM9_CH1_DATA );

		// TODO safing cmd
		// MPS_ME_1_SHUTDOWN_CMD
		bool MPS_ME_1_SHUTDOWN_CMD_A = ((FF1_IOM4_CH0 & 0x0020) != 0);
		bool MPS_ME_1_SHUTDOWN_CMD_B = ((FF2_IOM4_CH0 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_MPS_ME_1_SHUTDOWN_CMD, MPS_ME_1_SHUTDOWN_CMD_A & MPS_ME_1_SHUTDOWN_CMD_B );

		// TODO safing cmd
		// MPS_ME_2_SHUTDOWN_CMD
		bool MPS_ME_2_SHUTDOWN_CMD_A = ((FF2_IOM9_CH1 & 0x0001) != 0);
		bool MPS_ME_2_SHUTDOWN_CMD_B = ((FF3_IOM9_CH1 & 0x0001) != 0);
		WriteCOMPOOL_IS( SCP_MPS_ME_2_SHUTDOWN_CMD, MPS_ME_2_SHUTDOWN_CMD_A & MPS_ME_2_SHUTDOWN_CMD_B );

		// TODO safing cmd
		// MPS_ME_3_SHUTDOWN_CMD
		bool MPS_ME_3_SHUTDOWN_CMD_A = ((FF3_IOM4_CH0 & 0x0020) != 0);
		bool MPS_ME_3_SHUTDOWN_CMD_B = ((FF4_IOM4_CH0 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_MPS_ME_3_SHUTDOWN_CMD, MPS_ME_3_SHUTDOWN_CMD_A & MPS_ME_3_SHUTDOWN_CMD_B );


		unsigned short FF1_IOM9_CH1 = ReadCOMPOOL_IS( SCP_FF1_IOM9_CH1_DATA );

		// SENSE_SWITCH
		bool SENSE_SW_Z_CON_A = ((FF1_IOM9_CH1 & 0x0002) != 0);
		bool SENSE_SW_Z_CON_B = ((FF2_IOM9_CH1 & 0x0002) != 0);
		bool SENSE_SW_Z_CON_C = ((FF3_IOM9_CH1 & 0x0002) != 0);
		bool SENSE_SW_X_CON_A = ((FF1_IOM9_CH1 & 0x0004) != 0);
		bool SENSE_SW_X_CON_B = ((FF2_IOM9_CH1 & 0x0004) != 0);
		bool SENSE_SW_X_CON_C = ((FF3_IOM9_CH1 & 0x0004) != 0);
		bool SENSE_SW_Z = (SENSE_SW_Z_CON_A & SENSE_SW_Z_CON_B) |
			(SENSE_SW_Z_CON_A & SENSE_SW_Z_CON_C) |
			(SENSE_SW_Z_CON_B & SENSE_SW_Z_CON_C);
		bool SENSE_SW_X = (SENSE_SW_X_CON_A & SENSE_SW_X_CON_B) |
			(SENSE_SW_X_CON_A & SENSE_SW_X_CON_C) |
			(SENSE_SW_X_CON_B & SENSE_SW_X_CON_C);
		WriteCOMPOOL_IS( SCP_SENSE_SW, (!SENSE_SW_Z && SENSE_SW_X) ? 1 : 0 );// TODO C&W dilemma

		// ENTRY ROLL MODE
		unsigned short SEL_L_GAIN = 0;
		unsigned short SEL_NO_Y_JET = 0;
		if (ReadCOMPOOL_IS( SCP_ENTRY_SW_OVERRIDE ) != 1)// ignore switch if override on
		{
			unsigned short FF1_IOM4_CH2 = ReadCOMPOOL_IS( SCP_FF1_IOM4_CH2_DATA );
			unsigned short FF4_IOM9_CH1 = ReadCOMPOOL_IS( SCP_FF4_IOM9_CH1_DATA );
			unsigned short FF4_IOM12_CH2 = ReadCOMPOOL_IS( SCP_FF4_IOM12_CH2_DATA );

			unsigned short ENTRY_ROLL_MODE_NO_Y_JET_A = (FF1_IOM4_CH2 & 0x0008) >> 3;
			unsigned short ENTRY_ROLL_MODE_NO_Y_JET_B = (FF2_IOM4_CH0 & 0x0004) >> 2;
			unsigned short ENTRY_ROLL_MODE_NO_Y_JET_C = (FF3_IOM12_CH1 & 0x0004) >> 2;
			unsigned short ENTRY_ROLL_MODE_NO_Y_JET_D = (FF4_IOM12_CH2 & 0x8000) >> 15;
			unsigned short ENTRY_ROLL_MODE_L_GAIN_A = (FF1_IOM9_CH1 & 0x0008) >> 3;
			unsigned short ENTRY_ROLL_MODE_L_GAIN_B = (FF2_IOM9_CH1 & 0x0008) >> 3;
			unsigned short ENTRY_ROLL_MODE_L_GAIN_C = (FF3_IOM9_CH1 & 0x0008) >> 3;
			unsigned short ENTRY_ROLL_MODE_L_GAIN_D = (FF4_IOM9_CH1 & 0x0008) >> 3;

			unsigned short ENTRY_ROLL_MODE_NO_Y_JET_COUNT = ENTRY_ROLL_MODE_NO_Y_JET_A + ENTRY_ROLL_MODE_NO_Y_JET_B + ENTRY_ROLL_MODE_NO_Y_JET_C + ENTRY_ROLL_MODE_NO_Y_JET_D;
			unsigned short ENTRY_ROLL_MODE_L_GAIN_COUNT = ENTRY_ROLL_MODE_L_GAIN_A + ENTRY_ROLL_MODE_L_GAIN_B + ENTRY_ROLL_MODE_L_GAIN_C + ENTRY_ROLL_MODE_L_GAIN_D;

			if (ENTRY_ROLL_MODE_L_GAIN_COUNT > ENTRY_ROLL_MODE_NO_Y_JET_COUNT)
			{
				if (ENTRY_ROLL_MODE_L_GAIN_COUNT > 1) SEL_L_GAIN = 1;
			}
			else if (ENTRY_ROLL_MODE_NO_Y_JET_COUNT > ENTRY_ROLL_MODE_L_GAIN_COUNT)
			{
				if (ENTRY_ROLL_MODE_NO_Y_JET_COUNT > 1) SEL_NO_Y_JET = 1;
			}
		}
		WriteCOMPOOL_IS( SCP_SEL_L_GAIN, SEL_L_GAIN );
		WriteCOMPOOL_IS( SCP_SEL_NO_Y_JET, SEL_NO_Y_JET );


		unsigned short FF1_IOM4_CH1 = ReadCOMPOOL_IS( SCP_FF1_IOM4_CH1_DATA );
		unsigned short FF2_IOM4_CH1 = ReadCOMPOOL_IS( SCP_FF2_IOM4_CH1_DATA );
		unsigned short FF3_IOM4_CH1 = ReadCOMPOOL_IS( SCP_FF3_IOM4_CH1_DATA );
		unsigned short FF1_IOM4_CH2 = ReadCOMPOOL_IS( SCP_FF1_IOM4_CH2_DATA );
		unsigned short FF2_IOM12_CH2 = ReadCOMPOOL_IS( SCP_FF2_IOM12_CH2_DATA );
		unsigned short FF3_IOM12_CH2 = ReadCOMPOOL_IS( SCP_FF3_IOM12_CH2_DATA );
		unsigned short FF4_IOM12_CH2 = ReadCOMPOOL_IS( SCP_FF4_IOM12_CH2_DATA );

		// AUTOP
		unsigned short LAUTOP_C1 = getbit( FF1_IOM4_CH1, 10 );// FCS LH PITCH AUTO MODE A (V72K5251X)
		unsigned short LAUTOP_C2 = getbit( FF2_IOM4_CH1, 10 );// FCS LH PITCH AUTO MODE B (V72K5252X)
		unsigned short LAUTOP_C3 = getbit( FF3_IOM4_CH1, 10 );// FCS LH PITCH AUTO MODE C (V72K5253X)
		unsigned short RAUTOP_C1 = getbit( FF2_IOM12_CH1, 10 );// FCS RH PITCH AUTO MODE A (V72K5151X)
		unsigned short RAUTOP_C2 = getbit( FF3_IOM12_CH1, 10 );// FCS RH PITCH AUTO MODE B (V72K5152X)
		unsigned short RAUTOP_C3 = getbit( FF4_IOM12_CH1, 10 );// FCS RH PITCH AUTO MODE C (V72K5153X)
		WriteCOMPOOL_IS( SCP_AUTOP,
			((LAUTOP_C1 & LAUTOP_C2) | (LAUTOP_C1 & LAUTOP_C3) | (LAUTOP_C2 & LAUTOP_C3)) |
			((RAUTOP_C1 & RAUTOP_C2) | (RAUTOP_C1 & RAUTOP_C3) | (RAUTOP_C2 & RAUTOP_C3)) );

		// CSSP
		unsigned short LCSSP_C1 = getbit( FF1_IOM4_CH1, 11 );// FCS LH PITCH CSS MODE A (V72K5256X)
		unsigned short LCSSP_C2 = getbit( FF2_IOM4_CH1, 11 );// FCS LH PITCH CSS MODE B (V72K5257X)
		unsigned short LCSSP_C3 = getbit( FF3_IOM4_CH1, 11 );// FCS LH PITCH CSS MODE C (V72K5258X)
		unsigned short RCSSP_C1 = getbit( FF2_IOM12_CH1, 11 );// FCS RH PITCH CSS MODE A (V72K5156X)
		unsigned short RCSSP_C2 = getbit( FF3_IOM12_CH1, 11 );// FCS RH PITCH CSS MODE B (V72K5157X)
		unsigned short RCSSP_C3 = getbit( FF4_IOM12_CH1, 11 );// FCS RH PITCH CSS MODE C (V72K5158X)
		WriteCOMPOOL_IS( SCP_CSSP,
			((LCSSP_C1 & LCSSP_C2) | (LCSSP_C1 & LCSSP_C3) | (LCSSP_C2 & LCSSP_C3)) |
			((RCSSP_C1 & RCSSP_C2) | (RCSSP_C1 & RCSSP_C3) | (RCSSP_C2 & RCSSP_C3)) );

		// AUTORY
		unsigned short LAUTORY_C1 = getbit( FF1_IOM4_CH1, 13 );// FCS LH R-Y AUTO MODE A (V72K5265X)
		unsigned short LAUTORY_C2 = getbit( FF2_IOM4_CH1, 13 );// FCS LH R-Y AUTO MODE B (V72K5266X)
		unsigned short LAUTORY_C3 = getbit( FF3_IOM4_CH1, 13 );// FCS LH R-Y AUTO MODE C (V72K5267X)
		unsigned short RAUTORY_C1 = getbit( FF2_IOM12_CH1, 13 );// FCS RH R-Y AUTO MODE A (V72K5165X)
		unsigned short RAUTORY_C2 = getbit( FF3_IOM12_CH1, 13 );// FCS RH R-Y AUTO MODE B (V72K5166X)
		unsigned short RAUTORY_C3 = getbit( FF4_IOM12_CH1, 13 );// FCS RH R-Y AUTO MODE C (V72K5167X)
		WriteCOMPOOL_IS( SCP_AUTORY,
			((LAUTORY_C1 & LAUTORY_C2) | (LAUTORY_C1 & LAUTORY_C3) | (LAUTORY_C2 & LAUTORY_C3)) |
			((RAUTORY_C1 & RAUTORY_C2) | (RAUTORY_C1 & RAUTORY_C3) | (RAUTORY_C2 & RAUTORY_C3)) );

		// CSSRY
		unsigned short LCSSRY_C1 = getbit( FF1_IOM4_CH1, 14 );// FCS LH R-Y CSS MODE A (V72K5270X)
		unsigned short LCSSRY_C2 = getbit( FF2_IOM4_CH1, 14 );// FCS LH R-Y CSS MODE B (V72K5271X)
		unsigned short LCSSRY_C3 = getbit( FF3_IOM4_CH1, 14 );// FCS LH R-Y CSS MODE C (V72K5272X)
		unsigned short RCSSRY_C1 = getbit( FF2_IOM12_CH1, 14 );// FCS RH R-Y CSS MODE A (V72K5170X)
		unsigned short RCSSRY_C2 = getbit( FF3_IOM12_CH1, 14 );// FCS RH R-Y CSS MODE B (V72K5171X)
		unsigned short RCSSRY_C3 = getbit( FF4_IOM12_CH1, 14 );// FCS RH R-Y CSS MODE C (V72K5172X)
		WriteCOMPOOL_IS( SCP_CSSRY,
			((LCSSRY_C1 & LCSSRY_C2) | (LCSSRY_C1 & LCSSRY_C3) | (LCSSRY_C2 & LCSSRY_C3)) |
			((RCSSRY_C1 & RCSSRY_C2) | (RCSSRY_C1 & RCSSRY_C3) | (RCSSRY_C2 & RCSSRY_C3)) );

		// LH_AUTMANBF
		unsigned short LAUTOBF_C1 = getbit( FF1_IOM4_CH1, 15 );// LH BODY FLAP AUTO/MANUAL A (V72K4993X)
		unsigned short LAUTOBF_C2 = getbit( FF2_IOM4_CH1, 15 );// LH BODY FLAP AUTO/MANUAL B (V72K4994X)
		unsigned short LAUTOBF_C3 = getbit( FF3_IOM4_CH1, 15 );// LH BODY FLAP AUTO/MANUAL C (V72K4995X)
		unsigned short LH_AUTMANBF = (LAUTOBF_C1 & LAUTOBF_C2) | (LAUTOBF_C1 & LAUTOBF_C3) | (LAUTOBF_C2 & LAUTOBF_C3);
		WriteCOMPOOL_IS( SCP_LH_AUTMANBF, LH_AUTMANBF );

		// RH_AUTMANBF
		unsigned short RAUTOBF_C1 = getbit( FF2_IOM12_CH1, 15 );// RH BODY FLAP AUTO/MANUAL A (V72K4893X)
		unsigned short RAUTOBF_C2 = getbit( FF3_IOM12_CH1, 15 );// RH BODY FLAP AUTO/MANUAL B (V72K4894X)
		unsigned short RAUTOBF_C3 = getbit( FF4_IOM12_CH1, 15 );// RH BODY FLAP AUTO/MANUAL C (V72K4895X)
		unsigned short RH_AUTMANBF = (RAUTOBF_C1 & RAUTOBF_C2) | (RAUTOBF_C1 & RAUTOBF_C3) | (RAUTOBF_C2 & RAUTOBF_C3);
		WriteCOMPOOL_IS( SCP_RH_AUTMANBF, RH_AUTMANBF );

		// AUTMANBF
		WriteCOMPOOL_IS( SCP_AUTMANBF, LH_AUTMANBF | RH_AUTMANBF );

		// LH_AUTOSB
		unsigned short LAUTOSB_C1 = getbit( FF1_IOM4_CH2, 0 );// LH SPD BK/THROT AUTO/MAN A (V72K1570X)
		unsigned short LAUTOSB_C2 = getbit( FF2_IOM4_CH2, 0 );// LH SPD BK/THROT AUTO/MAN A (V72K1571X)
		unsigned short LAUTOSB_C3 = getbit( FF3_IOM4_CH2, 0 );// LH SPD BK/THROT AUTO/MAN A (V72K1572X)
		unsigned short LH_AUTOSB = (LAUTOSB_C1 & LAUTOSB_C2) | (LAUTOSB_C1 & LAUTOSB_C3) | (LAUTOSB_C2 & LAUTOSB_C3);
		WriteCOMPOOL_IS( SCP_LH_AUTOSB, LH_AUTOSB );

		// RH_AUTOSB
		unsigned short RAUTOSB_C1 = getbit( FF2_IOM12_CH2, 0 );// RH SPD BK/THROT AUTO/MAN A (V72K1600X)
		unsigned short RAUTOSB_C2 = getbit( FF3_IOM12_CH2, 0 );// RH SPD BK/THROT AUTO/MAN A (V72K1601X)
		unsigned short RAUTOSB_C3 = getbit( FF4_IOM12_CH2, 0 );// RH SPD BK/THROT AUTO/MAN A (V72K1602X)
		unsigned short RH_AUTOSB = (RAUTOSB_C1 & RAUTOSB_C2) | (RAUTOSB_C1 & RAUTOSB_C3) | (RAUTOSB_C2 & RAUTOSB_C3);
		WriteCOMPOOL_IS( SCP_RH_AUTOSB, RH_AUTOSB );

		// AUTOSB
		WriteCOMPOOL_IS( SCP_AUTOSB, LH_AUTOSB | RH_AUTOSB );


		unsigned short FF1_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM9_CH0_DATA );
		unsigned short FF2_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM9_CH0_DATA );
		unsigned short FF3_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM9_CH0_DATA );
		unsigned short FF4_IOM9_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM9_CH0_DATA );
		unsigned short FF4_IOM9_CH1 = ReadCOMPOOL_IS( SCP_FF4_IOM9_CH1_DATA );
		unsigned short FF1_IOM12_CH2 = ReadCOMPOOL_IS( SCP_FF1_IOM12_CH2_DATA );

		// FWD_DAP_SELECT_A
		bool FWD_DAP_SELECT_A_A = ((FF1_IOM9_CH0 & 0x0010) != 0);
		bool FWD_DAP_SELECT_A_B = ((FF2_IOM9_CH0 & 0x0010) != 0);
		bool FWD_DAP_SELECT_A_C = ((FF3_IOM9_CH0 & 0x0100) != 0);
		WriteCOMPOOL_IS( SCP_FWD_DAP_SELECT_A,
			(FWD_DAP_SELECT_A_A & FWD_DAP_SELECT_A_B) |
			(FWD_DAP_SELECT_A_A & FWD_DAP_SELECT_A_C) |
			(FWD_DAP_SELECT_A_B & FWD_DAP_SELECT_A_C) );

		// FWD_DAP_SELECT_B
		bool FWD_DAP_SELECT_B_A = ((FF1_IOM9_CH0 & 0x0020) != 0);
		bool FWD_DAP_SELECT_B_B = ((FF2_IOM9_CH0 & 0x0020) != 0);
		bool FWD_DAP_SELECT_B_C = ((FF3_IOM9_CH0 & 0x0200) != 0);
		WriteCOMPOOL_IS( SCP_FWD_DAP_SELECT_B,
			(FWD_DAP_SELECT_B_A & FWD_DAP_SELECT_B_B) |
			(FWD_DAP_SELECT_B_A & FWD_DAP_SELECT_B_C) |
			(FWD_DAP_SELECT_B_B & FWD_DAP_SELECT_B_C) );

		// FWD_DAP_AUTO
		bool FWD_DAP_AUTO_A = ((FF1_IOM9_CH0 & 0x0100) != 0);
		bool FWD_DAP_AUTO_B = ((FF2_IOM9_CH0 & 0x0100) != 0);
		bool FWD_DAP_AUTO_C = ((FF3_IOM9_CH0 & 0x0400) != 0);
		WriteCOMPOOL_IS( SCP_FWD_DAP_AUTO,
			(FWD_DAP_AUTO_A & FWD_DAP_AUTO_B) |
			(FWD_DAP_AUTO_A & FWD_DAP_AUTO_C) |
			(FWD_DAP_AUTO_B & FWD_DAP_AUTO_C) );

		// FWD_DAP_MAN
		bool FWD_DAP_MAN_A = ((FF1_IOM9_CH0 & 0x0200) != 0);
		bool FWD_DAP_MAN_B = ((FF2_IOM9_CH0 & 0x0200) != 0);
		bool FWD_DAP_MAN_C = ((FF3_IOM9_CH0 & 0x0800) != 0);
		WriteCOMPOOL_IS( SCP_FWD_DAP_MAN,
			(FWD_DAP_MAN_A & FWD_DAP_MAN_B) |
			(FWD_DAP_MAN_A & FWD_DAP_MAN_C) |
			(FWD_DAP_MAN_B & FWD_DAP_MAN_C) );

		// FWD_RCS_OPTIONS_NORM
		bool FWD_RCS_OPTIONS_NORM_A = ((FF1_IOM9_CH1 & 0x2000) != 0);
		bool FWD_RCS_OPTIONS_NORM_B = ((FF2_IOM9_CH1 & 0x2000) != 0);
		bool FWD_RCS_OPTIONS_NORM_C = ((FF3_IOM12_CH2 & 0x4000) != 0);
		WriteCOMPOOL_IS( SCP_FWD_RCS_OPTIONS_NORM,
			(FWD_RCS_OPTIONS_NORM_A & FWD_RCS_OPTIONS_NORM_B) |
			(FWD_RCS_OPTIONS_NORM_A & FWD_RCS_OPTIONS_NORM_C) |
			(FWD_RCS_OPTIONS_NORM_B & FWD_RCS_OPTIONS_NORM_C) );

		// FWD_RCS_OPTIONS_VERNIER
		bool FWD_RCS_OPTIONS_VERNIER_A = ((FF1_IOM9_CH1 & 0x4000) != 0);
		bool FWD_RCS_OPTIONS_VERNIER_B = ((FF2_IOM9_CH1 & 0x4000) != 0);
		bool FWD_RCS_OPTIONS_VERNIER_C = ((FF3_IOM12_CH2 & 0x8000) != 0);
		WriteCOMPOOL_IS( SCP_FWD_RCS_OPTIONS_VERNIER,
			(FWD_RCS_OPTIONS_VERNIER_A & FWD_RCS_OPTIONS_VERNIER_B) |
			(FWD_RCS_OPTIONS_VERNIER_A & FWD_RCS_OPTIONS_VERNIER_C) |
			(FWD_RCS_OPTIONS_VERNIER_B & FWD_RCS_OPTIONS_VERNIER_C) );

		// FWD_ROTATION_ROLL_DISC_RATE
		bool FWD_ROTATION_ROLL_DISC_RATE_A = ((FF1_IOM9_CH1 & 0x0010) != 0);
		bool FWD_ROTATION_ROLL_DISC_RATE_B = ((FF2_IOM9_CH1 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_ROLL_DISC_RATE, FWD_ROTATION_ROLL_DISC_RATE_A & FWD_ROTATION_ROLL_DISC_RATE_B );

		// FWD_ROTATION_ROLL_ACCEL
		bool FWD_ROTATION_ROLL_ACCEL_A = ((FF1_IOM9_CH1 & 0x0020) != 0);
		bool FWD_ROTATION_ROLL_ACCEL_B = ((FF2_IOM9_CH1 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_ROLL_ACCEL, FWD_ROTATION_ROLL_ACCEL_A & FWD_ROTATION_ROLL_ACCEL_B );

		// FWD_ROTATION_ROLL_PULSE
		bool FWD_ROTATION_ROLL_PULSE_A = ((FF1_IOM9_CH1 & 0x0040) != 0);
		bool FWD_ROTATION_ROLL_PULSE_B = ((FF2_IOM9_CH1 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_ROLL_PULSE, FWD_ROTATION_ROLL_PULSE_A & FWD_ROTATION_ROLL_PULSE_B );

		// FWD_ROTATION_PITCH_DISC_RATE
		bool FWD_ROTATION_PITCH_DISC_RATE_A = ((FF1_IOM9_CH1 & 0x0080) != 0);
		bool FWD_ROTATION_PITCH_DISC_RATE_B = ((FF2_IOM9_CH1 & 0x0080) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_PITCH_DISC_RATE, FWD_ROTATION_PITCH_DISC_RATE_A & FWD_ROTATION_PITCH_DISC_RATE_B );

		// FWD_ROTATION_PITCH_ACCEL
		bool FWD_ROTATION_PITCH_ACCEL_A = ((FF1_IOM9_CH1 & 0x0100) != 0);
		bool FWD_ROTATION_PITCH_ACCEL_B = ((FF2_IOM9_CH1 & 0x0100) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_PITCH_ACCEL, FWD_ROTATION_PITCH_ACCEL_A & FWD_ROTATION_PITCH_ACCEL_B );

		// FWD_ROTATION_PITCH_PULSE
		bool FWD_ROTATION_PITCH_PULSE_A = ((FF1_IOM9_CH1 & 0x0200) != 0);
		bool FWD_ROTATION_PITCH_PULSE_B = ((FF2_IOM9_CH1 & 0x0200) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_PITCH_PULSE, FWD_ROTATION_PITCH_PULSE_A & FWD_ROTATION_PITCH_PULSE_B );

		// FWD_ROTATION_YAW_DISC_RATE
		bool FWD_ROTATION_YAW_DISC_RATE_A = ((FF1_IOM9_CH1 & 0x0400) != 0);
		bool FWD_ROTATION_YAW_DISC_RATE_B = ((FF2_IOM9_CH1 & 0x0400) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_YAW_DISC_RATE, FWD_ROTATION_YAW_DISC_RATE_A & FWD_ROTATION_YAW_DISC_RATE_B );

		// FWD_ROTATION_YAW_ACCEL
		bool FWD_ROTATION_YAW_ACCEL_A = ((FF1_IOM9_CH1 & 0x0800) != 0);
		bool FWD_ROTATION_YAW_ACCEL_B = ((FF2_IOM9_CH1 & 0x0800) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_YAW_ACCEL, FWD_ROTATION_YAW_ACCEL_A & FWD_ROTATION_YAW_ACCEL_B );

		// FWD_ROTATION_YAW_PULSE
		bool FWD_ROTATION_YAW_PULSE_A = ((FF1_IOM9_CH1 & 0x1000) != 0);
		bool FWD_ROTATION_YAW_PULSE_B = ((FF2_IOM9_CH1 & 0x1000) != 0);
		WriteCOMPOOL_IS( SCP_FWD_ROTATION_YAW_PULSE, FWD_ROTATION_YAW_PULSE_A & FWD_ROTATION_YAW_PULSE_B );

		// FWD_TRANSLATION_X_NORM
		bool FWD_TRANSLATION_X_NORM_A = ((FF1_IOM9_CH1 & 0x8000) != 0);
		bool FWD_TRANSLATION_X_NORM_B = ((FF2_IOM9_CH1 & 0x8000) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_X_NORM, FWD_TRANSLATION_X_NORM_A & FWD_TRANSLATION_X_NORM_B );

		// FWD_TRANSLATION_X_PULSE
		bool FWD_TRANSLATION_X_PULSE_A = ((FF1_IOM9_CH2 & 0x0001) != 0);
		bool FWD_TRANSLATION_X_PULSE_B = ((FF2_IOM9_CH2 & 0x0001) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_X_PULSE, FWD_TRANSLATION_X_PULSE_A & FWD_TRANSLATION_X_PULSE_B );

		// FWD_TRANSLATION_X_LVLH
		bool FWD_TRANSLATION_X_LVLH_A = ((FF1_IOM9_CH2 & 0x0002) != 0);
		bool FWD_TRANSLATION_X_LVLH_B = ((FF2_IOM9_CH2 & 0x0002) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_X_LVLH, FWD_TRANSLATION_X_LVLH_A & FWD_TRANSLATION_X_LVLH_B );

		// FWD_TRANSLATION_Y_NORM
		bool FWD_TRANSLATION_Y_NORM_A = ((FF1_IOM9_CH2 & 0x0004) != 0);
		bool FWD_TRANSLATION_Y_NORM_B = ((FF2_IOM9_CH2 & 0x0004) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_Y_NORM, FWD_TRANSLATION_Y_NORM_A & FWD_TRANSLATION_Y_NORM_B );

		// FWD_TRANSLATION_Y_PULSE
		bool FWD_TRANSLATION_Y_PULSE_A = ((FF1_IOM9_CH2 & 0x0008) != 0);
		bool FWD_TRANSLATION_Y_PULSE_B = ((FF2_IOM9_CH2 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_Y_PULSE, FWD_TRANSLATION_Y_PULSE_A & FWD_TRANSLATION_Y_PULSE_B );

		// FWD_TRANSLATION_Y_LOW_Z
		bool FWD_TRANSLATION_Y_LOW_Z_A = ((FF1_IOM9_CH2 & 0x0010) != 0);
		bool FWD_TRANSLATION_Y_LOW_Z_B = ((FF2_IOM9_CH2 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_Y_LOW_Z, FWD_TRANSLATION_Y_LOW_Z_A & FWD_TRANSLATION_Y_LOW_Z_B );

		// FWD_TRANSLATION_Z_NORM
		bool FWD_TRANSLATION_Z_NORM_A = ((FF1_IOM9_CH2 & 0x0020) != 0);
		bool FWD_TRANSLATION_Z_NORM_B = ((FF2_IOM9_CH2 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_Z_NORM, FWD_TRANSLATION_Z_NORM_A & FWD_TRANSLATION_Z_NORM_B );

		// FWD_TRANSLATION_Z_PULSE
		bool FWD_TRANSLATION_Z_PULSE_A = ((FF1_IOM9_CH2 & 0x0040) != 0);
		bool FWD_TRANSLATION_Z_PULSE_B = ((FF2_IOM9_CH2 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_Z_PULSE, FWD_TRANSLATION_Z_PULSE_A & FWD_TRANSLATION_Z_PULSE_B );

		// FWD_TRANSLATION_Z_HIGH
		bool FWD_TRANSLATION_Z_HIGH_A = ((FF1_IOM9_CH2 & 0x0080) != 0);
		bool FWD_TRANSLATION_Z_HIGH_B = ((FF2_IOM9_CH2 & 0x0080) != 0);
		WriteCOMPOOL_IS( SCP_FWD_TRANSLATION_Z_HIGH, FWD_TRANSLATION_Z_HIGH_A & FWD_TRANSLATION_Z_HIGH_B );

		// AFT_DAP_SELECT_A
		bool AFT_DAP_SELECT_A_A = ((FF3_IOM9_CH0 & 0x0010) != 0);
		bool AFT_DAP_SELECT_A_B = ((FF4_IOM9_CH0 & 0x0010) != 0);
		bool AFT_DAP_SELECT_A_C = ((FF1_IOM9_CH0 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_AFT_DAP_SELECT_A,
			(AFT_DAP_SELECT_A_A & AFT_DAP_SELECT_A_B) |
			(AFT_DAP_SELECT_A_A & AFT_DAP_SELECT_A_C) |
			(AFT_DAP_SELECT_A_B & AFT_DAP_SELECT_A_C) );

		// AFT_DAP_SELECT_B
		bool AFT_DAP_SELECT_B_A = ((FF3_IOM9_CH0 & 0x0020) != 0);
		bool AFT_DAP_SELECT_B_B = ((FF4_IOM9_CH0 & 0x0020) != 0);
		bool AFT_DAP_SELECT_B_C = ((FF1_IOM9_CH0 & 0x0080) != 0);
		WriteCOMPOOL_IS( SCP_AFT_DAP_SELECT_B,
			(AFT_DAP_SELECT_B_A & AFT_DAP_SELECT_B_B) |
			(AFT_DAP_SELECT_B_A & AFT_DAP_SELECT_B_C) |
			(AFT_DAP_SELECT_B_B & AFT_DAP_SELECT_B_C) );

		// AFT_DAP_AUTO
		bool AFT_DAP_AUTO_A = ((FF3_IOM9_CH0 & 0x0100) != 0);
		bool AFT_DAP_AUTO_B = ((FF4_IOM9_CH0 & 0x0100) != 0);
		bool AFT_DAP_AUTO_C = ((FF1_IOM9_CH0 & 0x0400) != 0);
		WriteCOMPOOL_IS( SCP_AFT_DAP_AUTO,
			(AFT_DAP_AUTO_A & AFT_DAP_AUTO_B) |
			(AFT_DAP_AUTO_A & AFT_DAP_AUTO_C) |
			(AFT_DAP_AUTO_B & AFT_DAP_AUTO_C) );

		// AFT_DAP_MAN
		bool AFT_DAP_MAN_A = ((FF3_IOM9_CH0 & 0x0200) != 0);
		bool AFT_DAP_MAN_B = ((FF4_IOM9_CH0 & 0x0200) != 0);
		bool AFT_DAP_MAN_C = ((FF1_IOM9_CH0 & 0x0800) != 0);
		WriteCOMPOOL_IS( SCP_AFT_DAP_MAN,
			(AFT_DAP_MAN_A & AFT_DAP_MAN_B) |
			(AFT_DAP_MAN_A & AFT_DAP_MAN_C) |
			(AFT_DAP_MAN_B & AFT_DAP_MAN_C) );

		// AFT_RCS_OPTIONS_NORM
		bool AFT_RCS_OPTIONS_NORM_A = ((FF3_IOM9_CH1 & 0x2000) != 0);
		bool AFT_RCS_OPTIONS_NORM_B = ((FF4_IOM9_CH1 & 0x2000) != 0);
		bool AFT_RCS_OPTIONS_NORM_C = ((FF1_IOM12_CH2 & 0x4000) != 0);
		WriteCOMPOOL_IS( SCP_AFT_RCS_OPTIONS_NORM,
			(AFT_RCS_OPTIONS_NORM_A & AFT_RCS_OPTIONS_NORM_B) |
			(AFT_RCS_OPTIONS_NORM_A & AFT_RCS_OPTIONS_NORM_C) |
			(AFT_RCS_OPTIONS_NORM_B & AFT_RCS_OPTIONS_NORM_C) );

		// AFT_RCS_OPTIONS_VERNIER
		bool AFT_RCS_OPTIONS_VERNIER_A = ((FF3_IOM9_CH1 & 0x4000) != 0);
		bool AFT_RCS_OPTIONS_VERNIER_B = ((FF4_IOM9_CH1 & 0x4000) != 0);
		bool AFT_RCS_OPTIONS_VERNIER_C = ((FF1_IOM12_CH2 & 0x8000) != 0);
		WriteCOMPOOL_IS( SCP_AFT_RCS_OPTIONS_VERNIER,
			(AFT_RCS_OPTIONS_VERNIER_A & AFT_RCS_OPTIONS_VERNIER_B) |
			(AFT_RCS_OPTIONS_VERNIER_A & AFT_RCS_OPTIONS_VERNIER_C) |
			(AFT_RCS_OPTIONS_VERNIER_B & AFT_RCS_OPTIONS_VERNIER_C) );

		// AFT_ROTATION_ROLL_DISC_RATE
		bool AFT_ROTATION_ROLL_DISC_RATE_A = ((FF3_IOM9_CH1 & 0x0010) != 0);
		bool AFT_ROTATION_ROLL_DISC_RATE_B = ((FF4_IOM9_CH1 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_ROLL_DISC_RATE, AFT_ROTATION_ROLL_DISC_RATE_A & AFT_ROTATION_ROLL_DISC_RATE_B );

		// AFT_ROTATION_ROLL_ACCEL
		bool AFT_ROTATION_ROLL_ACCEL_A = ((FF3_IOM9_CH1 & 0x0020) != 0);
		bool AFT_ROTATION_ROLL_ACCEL_B = ((FF4_IOM9_CH1 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_ROLL_ACCEL, AFT_ROTATION_ROLL_ACCEL_A & AFT_ROTATION_ROLL_ACCEL_B );

		// AFT_ROTATION_ROLL_PULSE
		bool AFT_ROTATION_ROLL_PULSE_A = ((FF3_IOM9_CH1 & 0x0040) != 0);
		bool AFT_ROTATION_ROLL_PULSE_B = ((FF4_IOM9_CH1 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_ROLL_PULSE, AFT_ROTATION_ROLL_PULSE_A & AFT_ROTATION_ROLL_PULSE_B );

		// AFT_ROTATION_PITCH_DISC_RATE
		bool AFT_ROTATION_PITCH_DISC_RATE_A = ((FF3_IOM9_CH1 & 0x0080) != 0);
		bool AFT_ROTATION_PITCH_DISC_RATE_B = ((FF4_IOM9_CH1 & 0x0080) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_PITCH_DISC_RATE, AFT_ROTATION_PITCH_DISC_RATE_A & AFT_ROTATION_PITCH_DISC_RATE_B );

		// AFT_ROTATION_PITCH_ACCEL
		bool AFT_ROTATION_PITCH_ACCEL_A = ((FF3_IOM9_CH1 & 0x0100) != 0);
		bool AFT_ROTATION_PITCH_ACCEL_B = ((FF4_IOM9_CH1 & 0x0100) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_PITCH_ACCEL, AFT_ROTATION_PITCH_ACCEL_A & AFT_ROTATION_PITCH_ACCEL_B );

		// AFT_ROTATION_PITCH_PULSE
		bool AFT_ROTATION_PITCH_PULSE_A = ((FF3_IOM9_CH1 & 0x0200) != 0);
		bool AFT_ROTATION_PITCH_PULSE_B = ((FF4_IOM9_CH1 & 0x0200) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_PITCH_PULSE, AFT_ROTATION_PITCH_PULSE_A & AFT_ROTATION_PITCH_PULSE_B );

		// AFT_ROTATION_YAW_DISC_RATE
		bool AFT_ROTATION_YAW_DISC_RATE_A = ((FF3_IOM9_CH1 & 0x0400) != 0);
		bool AFT_ROTATION_YAW_DISC_RATE_B = ((FF4_IOM9_CH1 & 0x0400) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_YAW_DISC_RATE, AFT_ROTATION_YAW_DISC_RATE_A & AFT_ROTATION_YAW_DISC_RATE_B );

		// AFT_ROTATION_YAW_ACCEL
		bool AFT_ROTATION_YAW_ACCEL_A = ((FF3_IOM9_CH1 & 0x0800) != 0);
		bool AFT_ROTATION_YAW_ACCEL_B = ((FF4_IOM9_CH1 & 0x0800) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_YAW_ACCEL, AFT_ROTATION_YAW_ACCEL_A & AFT_ROTATION_YAW_ACCEL_B );

		// AFT_ROTATION_YAW_PULSE
		bool AFT_ROTATION_YAW_PULSE_A = ((FF3_IOM9_CH1 & 0x1000) != 0);
		bool AFT_ROTATION_YAW_PULSE_B = ((FF4_IOM9_CH1 & 0x1000) != 0);
		WriteCOMPOOL_IS( SCP_AFT_ROTATION_YAW_PULSE, AFT_ROTATION_YAW_PULSE_A & AFT_ROTATION_YAW_PULSE_B );

		// AFT_TRANSLATION_X_NORM
		bool AFT_TRANSLATION_X_NORM_A = ((FF3_IOM9_CH1 & 0x8000) != 0);
		bool AFT_TRANSLATION_X_NORM_B = ((FF4_IOM9_CH1 & 0x8000) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_X_NORM, AFT_TRANSLATION_X_NORM_A & AFT_TRANSLATION_X_NORM_B );

		// AFT_TRANSLATION_X_PULSE
		bool AFT_TRANSLATION_X_PULSE_A = ((FF3_IOM9_CH2 & 0x0001) != 0);
		bool AFT_TRANSLATION_X_PULSE_B = ((FF4_IOM9_CH2 & 0x0001) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_X_PULSE, AFT_TRANSLATION_X_PULSE_A & AFT_TRANSLATION_X_PULSE_B );

		// AFT_TRANSLATION_X_LVLH
		bool AFT_TRANSLATION_X_LVLH_A = ((FF3_IOM9_CH2 & 0x0002) != 0);
		bool AFT_TRANSLATION_X_LVLH_B = ((FF4_IOM9_CH2 & 0x0002) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_X_LVLH, AFT_TRANSLATION_X_LVLH_A & AFT_TRANSLATION_X_LVLH_B );

		// AFT_TRANSLATION_Y_NORM
		bool AFT_TRANSLATION_Y_NORM_A = ((FF3_IOM9_CH2 & 0x0004) != 0);
		bool AFT_TRANSLATION_Y_NORM_B = ((FF4_IOM9_CH2 & 0x0004) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_Y_NORM, AFT_TRANSLATION_Y_NORM_A & AFT_TRANSLATION_Y_NORM_B );

		// AFT_TRANSLATION_Y_PULSE
		bool AFT_TRANSLATION_Y_PULSE_A = ((FF3_IOM9_CH2 & 0x0008) != 0);
		bool AFT_TRANSLATION_Y_PULSE_B = ((FF4_IOM9_CH2 & 0x0008) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_Y_PULSE, AFT_TRANSLATION_Y_PULSE_A & AFT_TRANSLATION_Y_PULSE_B );

		// AFT_TRANSLATION_Y_LOW_Z
		bool AFT_TRANSLATION_Y_LOW_Z_A = ((FF3_IOM9_CH2 & 0x0010) != 0);
		bool AFT_TRANSLATION_Y_LOW_Z_B = ((FF4_IOM9_CH2 & 0x0010) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_Y_LOW_Z, AFT_TRANSLATION_Y_LOW_Z_A & AFT_TRANSLATION_Y_LOW_Z_B );

		// AFT_TRANSLATION_Z_NORM
		bool AFT_TRANSLATION_Z_NORM_A = ((FF3_IOM9_CH2 & 0x0020) != 0);
		bool AFT_TRANSLATION_Z_NORM_B = ((FF4_IOM9_CH2 & 0x0020) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_Z_NORM, AFT_TRANSLATION_Z_NORM_A & AFT_TRANSLATION_Z_NORM_B );

		// AFT_TRANSLATION_Z_PULSE
		bool AFT_TRANSLATION_Z_PULSE_A = ((FF3_IOM9_CH2 & 0x0040) != 0);
		bool AFT_TRANSLATION_Z_PULSE_B = ((FF4_IOM9_CH2 & 0x0040) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_Z_PULSE, AFT_TRANSLATION_Z_PULSE_A & AFT_TRANSLATION_Z_PULSE_B );

		// AFT_TRANSLATION_Z_HIGH
		bool AFT_TRANSLATION_Z_HIGH_A = ((FF3_IOM9_CH2 & 0x0080) != 0);
		bool AFT_TRANSLATION_Z_HIGH_B = ((FF4_IOM9_CH2 & 0x0080) != 0);
		WriteCOMPOOL_IS( SCP_AFT_TRANSLATION_Z_HIGH, AFT_TRANSLATION_Z_HIGH_A & AFT_TRANSLATION_Z_HIGH_B );

		// HSI
		unsigned short LHSIAPP = getbit( FF1_IOM12_CH1, 2 );// LH HSI APPROACH MODE SELECT (V72K8582X)
		unsigned short LHSITAEM = getbit( FF1_IOM12_CH1, 3 );// LH HSI TAEM MODE SELECT (V72K8581X)
		unsigned short LHSIENTRY = getbit( FF1_IOM12_CH1, 4 );// LH HSI ENTRY MODE SELECT (V72K8580X)
		unsigned short sel = 3;// default pos ENTRY
		if (ThreePositionSwitch( LHSIAPP, LHSITAEM, LHSIENTRY, sel )) WriteCOMPOOL_IS( SCP_MODE_LEFT, sel );

		unsigned short RHSIAPP = getbit( FF2_IOM12_CH1, 2 );// RH HSI APPROACH MODE SELECT (V72K8682X)
		unsigned short RHSITAEM = getbit( FF2_IOM12_CH1, 3 );// RH HSI TAEM MODE SELECT (V72K8681X)
		unsigned short RHSIENTRY = getbit( FF2_IOM12_CH1, 4 );// RH HSI ENTRY MODE SELECT (V72K8680X)
		sel = 3;// default pos ENTRY
		if (ThreePositionSwitch( RHSIAPP, RHSITAEM, RHSIENTRY, sel )) WriteCOMPOOL_IS( SCP_MODE_RIGHT, sel );

		unsigned short LHSITACAN = getbit( FF1_IOM12_CH1, 1 );// LH HSI TACAN SOURCE SELECT (V72K8587X)
		unsigned short LHSICMPTR = getbit( FF1_IOM12_CH1, 0 );// LH HSI NAV SOURCE SELECT (V72K8588X)
		unsigned short LHSIMSBLS = getbit( FF1_IOM12_CH0, 15 );// LH HSI MLS SOURCE SELECT (V72K8589X)
		sel = 2;// default pos NAV
		if (ThreePositionSwitch( LHSITACAN, LHSICMPTR, LHSIMSBLS, sel ))
		{
			WriteCOMPOOL_IS( SCP_SOURCE_LEFT, sel );
			WriteCOMPOOL_IS( SCP_HUD_L_HSI_SEL, sel );
		}

		unsigned short RHSITACAN = getbit( FF2_IOM12_CH1, 1 );// RH HSI TACAN SOURCE SELECT (V72K8687X)
		unsigned short RHSICMPTR = getbit( FF2_IOM12_CH1, 0 );// RH HSI NAV SOURCE SELECT (V72K8688X)
		unsigned short RHSIMSBLS = getbit( FF2_IOM12_CH0, 15 );// RH HSI MLS SOURCE SELECT (V72K8689X)
		sel = 2;// default pos NAV
		if (ThreePositionSwitch( RHSITACAN, RHSICMPTR, RHSIMSBLS, sel ))
		{
			WriteCOMPOOL_IS( SCP_SOURCE_RIGHT, sel );
			WriteCOMPOOL_IS( SCP_HUD_R_HSI_SEL, sel );
		}

		unsigned short LHSITRVR1 = getbit( FF1_IOM12_CH1, 7 );// LH HSI SOURCE SELECT-1 (V72K8501X)
		unsigned short LHSITRVR2 = getbit( FF1_IOM12_CH1, 6 );// LH HSI SOURCE SELECT-2 (V72K8502X)
		unsigned short LHSITRVR3 = getbit( FF1_IOM12_CH1, 5 );// LH HSI SOURCE SELECT-3 (V72K8503X)
		sel = 3;// default pos 3
		if (ThreePositionSwitch( LHSITRVR1, LHSITRVR2, LHSITRVR3, sel )) WriteCOMPOOL_IS( SCP_RCVR_LEFT, sel );

		unsigned short RHSITRVR1 = getbit( FF2_IOM12_CH1, 7 );// RH HSI SOURCE SELECT-1 (V72K8601X)
		unsigned short RHSITRVR2 = getbit( FF2_IOM12_CH1, 6 );// RH HSI SOURCE SELECT-2 (V72K8602X)
		unsigned short RHSITRVR3 = getbit( FF2_IOM12_CH1, 5 );// RH HSI SOURCE SELECT-3 (V72K8603X)
		sel = 3;// default pos 3
		if (ThreePositionSwitch( RHSITRVR1, RHSITRVR2, RHSITRVR3, sel )) WriteCOMPOOL_IS( SCP_RCVR_RIGHT, sel );

		// ADI
		unsigned short LH_ADI_ATTITUDE_SEL_INERTIAL = getbit( FF1_IOM4_CH1, 0 );// LH ADI ATTITUDE SEL-INERTIAL (V72K2015X)
		unsigned short LH_ADI_ATTITUDE_SEL_LVLH = getbit( FF1_IOM4_CH1, 1 );// LH ADI ATTITUDE SEL-LV/LH (V72K2016X)
		unsigned short LH_ADI_ATTITUDE_SEL_REFERENCE = getbit( FF1_IOM4_CH1, 2 );// LH ADI ATTITUDE SEL-REFERENCE (V72K2017X)
		sel = 2;// default pos LVLH
		if (ThreePositionSwitch( LH_ADI_ATTITUDE_SEL_INERTIAL, LH_ADI_ATTITUDE_SEL_LVLH, LH_ADI_ATTITUDE_SEL_REFERENCE, sel )) WriteCOMPOOL_AIS( SCP_ATT_SEL_SW, 1, sel, 3 );

		unsigned short RH_ADI_ATTITUDE_SEL_INERTIAL = getbit( FF2_IOM4_CH1, 0 );// RH ADI ATTITUDE SEL-INERTIAL (V72K2065X)
		unsigned short RH_ADI_ATTITUDE_SEL_LVLH = getbit( FF2_IOM4_CH1, 1 );// RH ADI ATTITUDE SEL-LV/LH (V72K2066X)
		unsigned short RH_ADI_ATTITUDE_SEL_REFERENCE = getbit( FF2_IOM4_CH1, 2 );// RH ADI ATTITUDE SEL-REFERENCE (V72K2067X)
		sel = 2;// default pos LVLH
		if (ThreePositionSwitch( RH_ADI_ATTITUDE_SEL_INERTIAL, RH_ADI_ATTITUDE_SEL_LVLH, RH_ADI_ATTITUDE_SEL_REFERENCE, sel ))WriteCOMPOOL_AIS( SCP_ATT_SEL_SW, 2, sel, 3 );

		unsigned short AFT_ADI_ATTITUDE_SEL_INERTIAL = getbit( FF3_IOM4_CH1, 0 );// AFT ADI ATTITUDE SEL-INERTIAL (V72K2101X)
		unsigned short AFT_ADI_ATTITUDE_SEL_LVLH = getbit( FF3_IOM4_CH1, 1 );// AFT ADI ATTITUDE SEL-LV/LH (V72K2102X)
		unsigned short AFT_ADI_ATTITUDE_SEL_REFERENCE = getbit( FF3_IOM4_CH1, 2 );// AFT ADI ATTITUDE SEL-REFERENCE (V72K2103X)
		sel = 2;// default pos LVLH
		if (ThreePositionSwitch( AFT_ADI_ATTITUDE_SEL_INERTIAL, AFT_ADI_ATTITUDE_SEL_LVLH, AFT_ADI_ATTITUDE_SEL_REFERENCE, sel ))WriteCOMPOOL_AIS( SCP_ATT_SEL_SW, 3, sel, 3 );

		unsigned short LADIRATE1 = getbit( FF1_IOM4_CH1, 5 );// LH ADI RATE SCALE-LOW (V72K2011X)
		unsigned short LADIRATE5 = getbit( FF1_IOM4_CH1, 4 );// LH ADI RATE SCALE-MEDIUM (V72K2009X)
		unsigned short LADIRATE10 = getbit( FF1_IOM4_CH1, 3 );// LH ADI RATE SCALE-HIGH (V72K2008X)
		sel = 2;// default pos MED
		if (ThreePositionSwitch( LADIRATE1, LADIRATE5, LADIRATE10, sel ))
		{
			WriteCOMPOOL_IS( SCP_LADIRSW, sel );
			WriteCOMPOOL_IS( SCP_HUD_L_ADI_SCL, sel );
		}

		unsigned short RADIRATE1 = getbit( FF2_IOM4_CH1, 5 );// RH ADI RATE SCALE-LOW (V72K2062X)
		unsigned short RADIRATE5 = getbit( FF2_IOM4_CH1, 4 );// RH ADI RATE SCALE-MEDIUM (V72K2061X)
		unsigned short RADIRATE10 = getbit( FF2_IOM4_CH1, 3 );// RH ADI RATE SCALE-HIGH (V72K2060X)
		sel = 2;// default pos MED
		if (ThreePositionSwitch( RADIRATE1, RADIRATE5, RADIRATE10, sel ))
		{
			WriteCOMPOOL_IS( SCP_RADIRSW, sel );
			WriteCOMPOOL_IS( SCP_HUD_R_ADI_SCL, sel );
		}

		unsigned short AFT_ADI_RATE_SCALE_LOW = getbit( FF3_IOM4_CH1, 5 );// AFT ADI RATE SCALE-LOW (V72K2095X)
		unsigned short AFT_ADI_RATE_SCALE_MEDIUM = getbit( FF3_IOM4_CH1, 4 );// AFT ADI RATE SCALE-MEDIUM (V72K2094X)
		unsigned short AFT_ADI_RATE_SCALE_HIGH = getbit( FF3_IOM4_CH1, 3 );// AFT ADI RATE SCALE-HIGH (V72K2093X)
		sel = 2;// default pos MED
		if (ThreePositionSwitch( AFT_ADI_RATE_SCALE_LOW, AFT_ADI_RATE_SCALE_MEDIUM, AFT_ADI_RATE_SCALE_HIGH, sel )) WriteCOMPOOL_IS( SCP_AADIRSW, sel );

		unsigned short LADIERROR1 = getbit( FF1_IOM4_CH1, 8 );// LH ADI ERROR SCALE-LOW (V72K8506X)
		unsigned short LADIERROR5 = getbit( FF1_IOM4_CH1, 7 );// LH ADI ERROR SCALE-MEDIUM (V72K8505X)
		unsigned short LADIERROR20 = getbit( FF1_IOM4_CH1, 6 );// LH ADI ERROR SCALE-HIGH (V72K8504X)
		sel = 2;// default pos MED
		if (ThreePositionSwitch( LADIERROR1, LADIERROR5, LADIERROR20, sel )) WriteCOMPOOL_IS( SCP_LADIESW, sel );

		unsigned short RADIERROR1 = getbit( FF2_IOM4_CH1, 8 );// RH ADI ERROR SCALE-LOW (V72K8606X)
		unsigned short RADIERROR5 = getbit( FF2_IOM4_CH1, 7 );// RH ADI ERROR SCALE-MEDIUM (V72K8605X)
		unsigned short RADIERROR20 = getbit( FF2_IOM4_CH1, 6 );// RH ADI ERROR SCALE-HIGH (V72K8604X)
		sel = 2;// default pos MED
		if (ThreePositionSwitch( RADIERROR1, RADIERROR5, RADIERROR20, sel )) WriteCOMPOOL_IS( SCP_RADIESW, sel );

		unsigned short AFT_ADI_ERROR_SCALE_LOW = getbit( FF3_IOM4_CH1, 8 );// AFT ADI ERROR SCALE-LOW (V72K2099X)
		unsigned short AFT_ADI_ERROR_SCALE_MEDIUM = getbit( FF3_IOM4_CH1, 7 );// AFT ADI ERROR SCALE-MEDIUM (V72K2098X)
		unsigned short AFT_ADI_ERROR_SCALE_HIGH = getbit( FF3_IOM4_CH1, 6 );// AFT ADI ERROR SCALE-HIGH (V72K2097X)
		sel = 2;// default pos MED
		if (ThreePositionSwitch( AFT_ADI_ERROR_SCALE_LOW, AFT_ADI_ERROR_SCALE_MEDIUM, AFT_ADI_ERROR_SCALE_HIGH, sel )) WriteCOMPOOL_IS( SCP_AADIESW, sel );

		unsigned short LH_ADI_ATTITUDE_REF_PB_A = getbit( FF1_IOM12_CH2, 6 );// LH ADI ATTITUDE REF PB-A (V72K2051X)
		unsigned short LH_ADI_ATTITUDE_REF_PB_B = getbit( FF1_IOM12_CH2, 7 );// LH ADI ATTITUDE REF PB-B (V72K2052X)
		unsigned short LH_ADI_ATTITUDE_REF_PB = LH_ADI_ATTITUDE_REF_PB_A & LH_ADI_ATTITUDE_REF_PB_B;

		unsigned short RH_ADI_ATTITUDE_REF_PB_A = getbit( FF2_IOM12_CH2, 6 );// RH ADI ATTITUDE REF PB-A (V72K2001X)
		unsigned short RH_ADI_ATTITUDE_REF_PB_B = getbit( FF2_IOM12_CH2, 7 );// RH ADI ATTITUDE REF PB-B (V72K2002X)
		unsigned short RH_ADI_ATTITUDE_REF_PB = RH_ADI_ATTITUDE_REF_PB_A & RH_ADI_ATTITUDE_REF_PB_B;
		WriteCOMPOOL_IS( SCP_FWD_ATT_REF_PB, LH_ADI_ATTITUDE_REF_PB | RH_ADI_ATTITUDE_REF_PB );

		unsigned short AFT_ADI_ATTITUDE_REF_PB_A = getbit( FF3_IOM12_CH2, 6 );// AFT ADI ATTITUDE REF PB-A (V72K2091X)
		unsigned short AFT_ADI_ATTITUDE_REF_PB_B = getbit( FF3_IOM12_CH2, 7 );// AFT ADI ATTITUDE REF PB-B (V72K2092X)
		WriteCOMPOOL_IS( SCP_AFT_ATT_REF_PB, AFT_ADI_ATTITUDE_REF_PB_A & AFT_ADI_ATTITUDE_REF_PB_B );


		unsigned short FF1_IOM6_CH0 = ReadCOMPOOL_IS( SCP_FF1_IOM6_CH0_DATA );
		unsigned short FF2_IOM6_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM6_CH0_DATA );
		unsigned short FF2_IOM15_CH0 = ReadCOMPOOL_IS( SCP_FF2_IOM15_CH0_DATA );
		unsigned short FF3_IOM6_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM6_CH0_DATA );
		unsigned short FF3_IOM15_CH0 = ReadCOMPOOL_IS( SCP_FF3_IOM15_CH0_DATA );
		unsigned short FF4_IOM15_CH0 = ReadCOMPOOL_IS( SCP_FF4_IOM15_CH0_DATA );

		// SBEV_LH_SEL
		unsigned short LSBTO_C1 = getbit( FF1_IOM6_CH0, 13 );// LH SBTC TAKEOVER-A (V72K1577X)
		unsigned short LSBTO_C2 = getbit( FF2_IOM6_CH0, 13 );// LH SBTC TAKEOVER-B (V72K1580X)
		unsigned short LSBTO_C3 = getbit( FF3_IOM6_CH0, 13 );// LH SBTC TAKEOVER-C (V72K1583X)
		WriteCOMPOOL_IS( SCP_SBEV_LH_SEL, (LSBTO_C1 & LSBTO_C2) | (LSBTO_C1 & LSBTO_C3) | (LSBTO_C2 & LSBTO_C3) );

		// SBEV_RH_SEL
		unsigned short RSBTO_C1 = getbit( FF2_IOM15_CH0, 13 );// RH SBTC TAKEOVER-A (V72K1587X)
		unsigned short RSBTO_C2 = getbit( FF3_IOM15_CH0, 13 );// RH SBTC TAKEOVER-B (V72K1590X)
		unsigned short RSBTO_C3 = getbit( FF4_IOM15_CH0, 13 );// RH SBTC TAKEOVER-C (V72K1593X)
		WriteCOMPOOL_IS( SCP_SBEV_RH_SEL, (RSBTO_C1 & RSBTO_C2) | (RSBTO_C1 & RSBTO_C3) | (RSBTO_C2 & RSBTO_C3) );


		unsigned short FA1_IOM3_CH1 = ReadCOMPOOL_IS( SCP_FA1_IOM3_CH1_DATA );
		unsigned short FA2_IOM3_CH1 = ReadCOMPOOL_IS( SCP_FA2_IOM3_CH1_DATA );
		unsigned short FA3_IOM3_CH1 = ReadCOMPOOL_IS( SCP_FA3_IOM3_CH1_DATA );
		unsigned short FA4_IOM3_CH1 = ReadCOMPOOL_IS( SCP_FA4_IOM3_CH1_DATA );

		// SEL OMS-L ENG ARM CMD
		unsigned short OMS_L_ENG_ARM_CMD_1 = getbit( FA3_IOM3_CH1, 7 );// OMS-L ENG ARM/CMD 1 OP (V43S4572X)
		unsigned short OMS_L_ENG_ARM_CMD_2 = getbit( FA1_IOM3_CH1, 7 );// OMS-L ENG ARM CMD 2 OP (V43S4573X)
		WriteCOMPOOL_IS( SCP_SEL_OMS_L_ENG_ARM_CMD, OMS_L_ENG_ARM_CMD_1 & OMS_L_ENG_ARM_CMD_2 );

		// SEL OMS-L ENG ARM/PRESS CMD
		unsigned short OMS_L_ENG_ARMPRESS_CMD_1 = getbit( FA3_IOM3_CH1, 6 );// OMS-L ENG ARM/PRESS CMD 1 OP (V43S4570X)
		unsigned short OMS_L_ENG_ARMPRESS_CMD_2 = getbit( FA1_IOM3_CH1, 6 );// OMS-L ENG ARM/PRESS CMD 2 OP (V43S4571X)
		WriteCOMPOOL_IS( SCP_SEL_OMS_L_ENG_ARMPRESS_CMD, OMS_L_ENG_ARMPRESS_CMD_1 & OMS_L_ENG_ARMPRESS_CMD_2 );

		// SEL OMS-R ENG ARM CMD
		unsigned short OMS_R_ENG_ARM_CMD_1 = getbit( FA4_IOM3_CH1, 7 );// OMS-R ENG ARM CMD 1 OP (V43S5572X)
		unsigned short OMS_R_ENG_ARM_CMD_2 = getbit( FA2_IOM3_CH1, 7 );// OMS-R ENG ARM CMD 2 OP (V43S5573X)
		WriteCOMPOOL_IS( SCP_SEL_OMS_R_ENG_ARM_CMD, OMS_R_ENG_ARM_CMD_1 & OMS_R_ENG_ARM_CMD_2 );

		// SEL OMS-R ENG ARM/PRESS CMD
		unsigned short OMS_R_ENG_ARMPRESS_CMD_1 = getbit( FA4_IOM3_CH1, 6 );// OMS-R ENG ARM/PRESS CMD 1 OP (V43S5570X)
		unsigned short OMS_R_ENG_ARMPRESS_CMD_2 = getbit( FA2_IOM3_CH1, 6 );// OMS-R ENG ARM/PRESS CMD 2 OP (V43S5571X)
		WriteCOMPOOL_IS( SCP_SEL_OMS_R_ENG_ARMPRESS_CMD, OMS_R_ENG_ARMPRESS_CMD_1 & OMS_R_ENG_ARMPRESS_CMD_2 );
		return;
	}

	bool Switch_RM::ThreePositionSwitch( const unsigned short c1, const unsigned short c2, const unsigned short c3, unsigned short &sel )
	{
		if ((c1 == 1) && (c2 == 0) && (c3 == 0)) sel = 1;
		else if ((c1 == 0) && (c2 == 1) && (c3 == 0)) sel = 2;
		else if ((c1 == 0) && (c2 == 0) && (c3 == 1)) sel = 3;
		else return false;
		return true;
	}

	bool Switch_RM::OnMajorModeChange( unsigned int newMajorMode )
	{
		switch (newMajorMode)
		{
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 201:
			case 202:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 601:
			case 602:
			case 603:
			case 801:
			case 901:
				return true;
			default:
				return false;
		}
	}
}
